!function(t){function e(n){if(o[n])return o[n].exports;var r=o[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var o={};return e.m=t,e.c=o,e.i=function(t){return t},e.d=function(t,o,n){e.o(t,o)||Object.defineProperty(t,o,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var o=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(o,"a",o),o},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=19)}([function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){for(e=e.toLowerCase();t&&t.parentNode;)if(t=t.parentNode,t.tagName&&t.tagName.toLowerCase()===e)return t;return null}},function(t,e,o){"use strict";t.exports=function(t){}},function(t,e,o){"use strict";t.exports=function(t){}},function(t,e,o){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}var r=o(13),s=n(r),i=o(0),c=n(i);t.exports=function(t){var e=[{title:"精選動態",description:"於動態時報上嵌入我們精選的熱門動態",key:"featured-feed"},{title:"移除廣告",description:"於動態時報上移除為贊助的動態",key:"remove-ad"},{title:"同步搜尋",description:"於臉書搜尋時，一並於我們專屬資料庫中搜尋",key:"sync-search"}];chrome.storage.local.get("setting",function(o){var n=o.setting||{};t.innerHTML=e.reduce(function(t,e){return t+'\n<div class="setting-section">\n  <div class="title">\n    <b>'+e.title+'</b>\n  </div>\n  \n  <div class="description">\n    <span>'+e.description+'</span>\n  </div>\n  \n  <div class="operation">\n    <span class="success-icon">\n      <i class="fa fa-check" aria-hidden="true"></i>\n    </span>\n    \n    <select id="'+e.key+'">\n        <option value="0">Off</option>\n        <option value="1" '+((0,s.default)(n[e.key])?"selected":"")+">On</option>\n    </select>\n  </div>\n</div>"},""),document.querySelectorAll(".custom-modal .box .content .setting-section .operation select").forEach(function(t){t.addEventListener("change",function(t){n[t.target.id]=(0,s.default)(t.target.value),chrome.storage.local.set({setting:n},function(){var e=(0,c.default)(t.target,"div").querySelector("span");e.className=e.className.replace(/ ?ani/g,""),setTimeout(function(){e.className+=" ani"},1)})})})})}},function(t,e,o){"use strict";t.exports=function(t){}},function(t,e,o){"use strict";function n(t){var e=d.exec(t);return{protocol:e[1]?e[1].toLowerCase():"",slashes:!!e[2],rest:e[3]}}function r(t,e){for(var o=(e||"/").split("/").slice(0,-1).concat(t.split("/")),n=o.length,r=o[n-1],s=!1,i=0;n--;)"."===o[n]?o.splice(n,1):".."===o[n]?(o.splice(n,1),i++):i&&(0===n&&(s=!0),o.splice(n,1),i--);return s&&o.unshift(""),"."!==r&&".."!==r||o.push(""),o.join("/")}function s(t,e,o){if(!(this instanceof s))return new s(t,e,o);var i,c,d,p,h,m,v=f.slice(),y=typeof e,g=this,b=0;for("object"!==y&&"string"!==y&&(o=e,e=null),o&&"function"!=typeof o&&(o=l.parse),e=u(e),c=n(t||""),i=!c.protocol&&!c.slashes,g.slashes=c.slashes||i&&e.slashes,g.protocol=c.protocol||e.protocol||"",t=c.rest,c.slashes||(v[2]=[/(.*)/,"pathname"]);b<v.length;b++)p=v[b],d=p[0],m=p[1],d!==d?g[m]=t:"string"==typeof d?~(h=t.indexOf(d))&&("number"==typeof p[2]?(g[m]=t.slice(0,h),t=t.slice(h+p[2])):(g[m]=t.slice(h),t=t.slice(0,h))):(h=d.exec(t))&&(g[m]=h[1],t=t.slice(0,h.index)),g[m]=g[m]||(i&&p[3]?e[m]||"":""),p[4]&&(g[m]=g[m].toLowerCase());o&&(g.query=o(g.query)),i&&e.slashes&&"/"!==g.pathname.charAt(0)&&(""!==g.pathname||""!==e.pathname)&&(g.pathname=r(g.pathname,e.pathname)),a(g.port,g.protocol)||(g.host=g.hostname,g.port=""),g.username=g.password="",g.auth&&(p=g.auth.split(":"),g.username=p[0]||"",g.password=p[1]||""),g.origin=g.protocol&&g.host&&"file:"!==g.protocol?g.protocol+"//"+g.host:"null",g.href=g.toString()}function i(t,e,o){var n=this;switch(t){case"query":"string"==typeof e&&e.length&&(e=(o||l.parse)(e)),n[t]=e;break;case"port":n[t]=e,a(e,n.protocol)?e&&(n.host=n.hostname+":"+e):(n.host=n.hostname,n[t]="");break;case"hostname":n[t]=e,n.port&&(e+=":"+n.port),n.host=e;break;case"host":n[t]=e,/:\d+$/.test(e)?(e=e.split(":"),n.port=e.pop(),n.hostname=e.join(":")):(n.hostname=e,n.port="");break;case"protocol":n.protocol=e.toLowerCase(),n.slashes=!o;break;case"pathname":n.pathname=e.length&&"/"!==e.charAt(0)?"/"+e:e;break;default:n[t]=e}for(var r=0;r<f.length;r++){var s=f[r];s[4]&&(n[s[1]]=n[s[1]].toLowerCase())}return n.origin=n.protocol&&n.host&&"file:"!==n.protocol?n.protocol+"//"+n.host:"null",n.href=n.toString(),n}function c(t){t&&"function"==typeof t||(t=l.stringify);var e,o=this,n=o.protocol;n&&":"!==n.charAt(n.length-1)&&(n+=":");var r=n+(o.slashes?"//":"");return o.username&&(r+=o.username,o.password&&(r+=":"+o.password),r+="@"),r+=o.host+o.pathname,e="object"==typeof o.query?t(o.query):o.query,e&&(r+="?"!==e.charAt(0)?"?"+e:e),o.hash&&(r+=o.hash),r}var a=o(15),u=o(16),l=o(14),d=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,f=[["#","hash"],["?","query"],["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d+)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]];s.prototype={set:i,toString:c},s.extractProtocol=n,s.location=u,s.qs=l,t.exports=s},function(t,e,o){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function r(t,e){return'<i class="fa fa-fw fa-'+t+'" aria-hidden="true" data-hover="tooltip" data-tooltip-delay="350" data-tooltip-content="'+e+'"></i>'}var s=o(0),i=n(s);t.exports=function(){var t=document.createElement("div");t.className="custom-button",t.innerHTML="\n"+r("fire","熱門粉專")+"\n"+r("bar-chart","個人統計")+"\n"+r("history","歷史回顧")+"\n"+r("cog","設定"),(0,i.default)(document.querySelector("div.custom-search-bar"),"div").append(t)}},function(t,e,o){"use strict";t.exports=function(){var t=document.createElement("div");t.className="custom-modal",t.style.display="none",t.innerHTML='\n<div class="background"></div>\n\n<div class="box">\n  <div class="header">\n    <div style="margin-left: 1rem;">\n      <b id="custom-modal-title" style="font-size: 16px;"></b>\n    </div>\n    <div class="close-button">\n      <i class="fa fa-lg fa-times" aria-hidden="true"></i>\n    </div>\n  </div>\n  \n  <div class="content"></div>\n</div>',document.body.append(t);var e=function(){t.style.display="none"};document.querySelector(".custom-modal .background").onclick=e,document.querySelector(".custom-modal .close-button i").onclick=e}},function(t,e,o){"use strict";t.exports=function(t){t.className+=" custom-navbar"}},function(t,e,o){"use strict";t.exports=function(t){var e=document.createElement("div");e.className="custom-search-bar",e.innerHTML='\n<form>\n  <div>\n    <input id="custom-search-input" type="text" placeholder="Search DB">\n  </div>\n</form>',t.append(e)}},function(t,e,o){"use strict";t.exports=function(){document.querySelectorAll(".custom-button i").forEach(function(t){t.addEventListener("click",function(t){document.querySelector(".custom-modal").style.display="block",document.querySelector("#custom-modal-title").innerText=t.target.dataset.tooltipContent;var e={fire:"hottest","bar-chart":"statistics",history:"history",cog:"setting"},n=t.target.className;n=n.substr(n.lastIndexOf("fa-")+3),o(18)("./"+e[n])(document.querySelector(".custom-modal .box .content"))})})}},function(t,e,o){"use strict";var n=function t(){var e=document.querySelectorAll('input[name="q"]');2>e.length&&!document.querySelector("#q")?window.setTimeout(t,1e3):e.item(e.length-1).addEventListener("input",function(t){document.querySelector("#custom-search-input").value=t.target.value})};t.exports=n},function(t,e,o){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}var r=o(5),s=n(r),i=o(0),c=n(i);t.exports=function(){var t=function(t){if(t.endsWith(":3")||t.includes("story_fbid"))return null;if(t.includes("photo.php"))return(0,s.default)(t,!0).query.fbidsss||null;var e=t.split("/");return(t.includes("photos")||t.endsWith("/"))&&e.pop(),e.pop()},e=function(t){var e=t.getBoundingClientRect(),o={top:window.scrollY,bottom:window.scrollY+document.documentElement.clientHeight},n={top:t.offsetTop+e.height/3,bottom:t.offsetTop+e.height/3*2};return n.top>o.top&&n.top<o.bottom||n.bottom>o.top&&n.bottom<o.bottom},o=0,n=[];window.onscroll=function(){if("/"!==window.location.pathname)return void(o=0);document.querySelectorAll('div[id^="hyperfeed_story_id"]').forEach(function(r){var s=r.querySelector('a[href^="https://l.facebook.com/l.php"]');if(s)switch(s.innerText){case"Sponsored":case"贊助":case"広告":return r.remove()}var i=r.querySelector("abbr.timestamp.livetimestamp");if(i){var a=(0,c.default)(i,"div").querySelector("[data-tooltip-content]");if(a&&(a=a.getAttribute("data-tooltip-content"),a.includes("Public")||a.includes("公開"))){var u=t((0,c.default)(i,"a").href);u&&!n.includes(u)&&(n.push(u),chrome.storage.local.set({feeds:n})),e(r)&&(0>window.scrollY-o?console.log("back",u):console.log(u))}}}),o=window.scrollY}}},function(t,e,o){"use strict";var n=function(t){return"string"==typeof t?/^(true|t|yes|y|1)$/i.test(t.trim()):"number"==typeof t?1===t:"boolean"==typeof t&&t};t.exports=n},function(t,e,o){"use strict";function n(t){for(var e,o=/([^=?&]+)=?([^&]*)/g,n={};e=o.exec(t);n[decodeURIComponent(e[1])]=decodeURIComponent(e[2]));return n}function r(t,e){e=e||"";var o=[];"string"!=typeof e&&(e="?");for(var n in t)s.call(t,n)&&o.push(encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return o.length?e+o.join("&"):""}var s=Object.prototype.hasOwnProperty;e.stringify=r,e.parse=n},function(t,e,o){"use strict";t.exports=function(t,e){if(e=e.split(":")[0],t=+t,!t)return!1;switch(e){case"http":case"ws":return 80!==t;case"https":case"wss":return 443!==t;case"ftp":return 21!==t;case"gopher":return 70!==t;case"file":return!1}return 0!==t}},function(t,e,o){"use strict";(function(e){var n,r=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,s={hash:1,query:1};t.exports=function(t){t=t||e.location||{},n=n||o(5);var i,c={},a=typeof t;if("blob:"===t.protocol)c=new n(unescape(t.pathname),{});else if("string"===a){c=new n(t,{});for(i in s)delete c[i]}else if("object"===a){for(i in t)i in s||(c[i]=t[i]);void 0===c.slashes&&(c.slashes=r.test(t.href))}return c}}).call(e,o(17))},function(t,e){var o;o=function(){return this}();try{o=o||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(o=window)}t.exports=o},function(t,e,o){function n(t){return o(r(t))}function r(t){var e=s[t];if(!(e+1))throw new Error("Cannot find module '"+t+"'.");return e}var s={"./history":1,"./history.js":1,"./hottest":2,"./hottest.js":2,"./setting":3,"./setting.js":3,"./statistics":4,"./statistics.js":4};n.keys=function(){return Object.keys(s)},n.resolve=r,t.exports=n,n.id=18},function(t,e,o){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}var r=o(0),s=n(r);document.onreadystatechange=function(){if("interactive"===document.readyState){var t=function(){var t=document.querySelector('div[role="search"]');return t||(t=(0,s.default)(document.querySelector('form[role="search"]'),"div")),(0,s.default)(t,"div")}();o(8)(t),o(9)(t),o(6)(),o(7)(),o(11)(),o(10)(),o(12)()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vY29udGVudC1zY3JpcHRzLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCA0MjVkZDI1NmVlZTAyM2FlZjVkMSIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdXAtdG8uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRlbnQtc2NyaXB0cy9tb25pdG9ycy9tb2RhbHMvaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGVudC1zY3JpcHRzL21vbml0b3JzL21vZGFscy9ob3R0ZXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb250ZW50LXNjcmlwdHMvbW9uaXRvcnMvbW9kYWxzL3NldHRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRlbnQtc2NyaXB0cy9tb25pdG9ycy9tb2RhbHMvc3RhdGlzdGljcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3VybC1wYXJzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGVudC1zY3JpcHRzL2luaXRpYWxpemF0aW9ucy9idXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRlbnQtc2NyaXB0cy9pbml0aWFsaXphdGlvbnMvbW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRlbnQtc2NyaXB0cy9pbml0aWFsaXphdGlvbnMvbmF2YmFyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250ZW50LXNjcmlwdHMvaW5pdGlhbGl6YXRpb25zL3NlYXJjaC1iYXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRlbnQtc2NyaXB0cy9tb25pdG9ycy9idXR0b24tY2xpY2suanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRlbnQtc2NyaXB0cy9tb25pdG9ycy9mYWNlYm9vay1zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRlbnQtc2NyaXB0cy9tb25pdG9ycy91c2VyLWZlZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9ib29sZWFuL2xpYi9ib29sZWFuLmpzIiwid2VicGFjazovLy8uL34vcXVlcnlzdHJpbmdpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZXF1aXJlcy1wb3J0L2luZGV4LmpzIiwid2VicGFjazovLy8uL34vdXJsLXBhcnNlL2xvbGNhdGlvbi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250ZW50LXNjcmlwdHMvbW9uaXRvcnMvbW9kYWxzIF5cXC5cXC8uKiQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRlbnQtc2NyaXB0cy9pbmRleC5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsImNhbGwiLCJtIiwiYyIsInZhbHVlIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJkZWZhdWx0IiwiZWwiLCJ0YWdOYW1lIiwidG9Mb3dlckNhc2UiLCJwYXJlbnROb2RlIiwiZG9tIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9ib29sZWFuIiwiX2Jvb2xlYW4yIiwiX3VwVG8iLCJfdXBUbzIiLCJ0YWJsZSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJrZXkiLCJjaHJvbWUiLCJzdG9yYWdlIiwibG9jYWwiLCJyZXN1bHQiLCJzZXR0aW5nIiwiaW5uZXJIVE1MIiwicmVkdWNlIiwiaHRtbCIsIml0ZW0iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwibm9kZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwidGFyZ2V0IiwiaWQiLCJzZXQiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NOYW1lIiwicmVwbGFjZSIsInNldFRpbWVvdXQiLCJleHRyYWN0UHJvdG9jb2wiLCJhZGRyZXNzIiwibWF0Y2giLCJwcm90b2NvbHJlIiwiZXhlYyIsInByb3RvY29sIiwic2xhc2hlcyIsInJlc3QiLCJyZXNvbHZlIiwicmVsYXRpdmUiLCJiYXNlIiwicGF0aCIsInNwbGl0Iiwic2xpY2UiLCJjb25jYXQiLCJsZW5ndGgiLCJsYXN0IiwidW5zaGlmdCIsInVwIiwic3BsaWNlIiwicHVzaCIsImpvaW4iLCJVUkwiLCJsb2NhdGlvbiIsInBhcnNlciIsInRoaXMiLCJleHRyYWN0ZWQiLCJwYXJzZSIsImluc3RydWN0aW9uIiwiaW5kZXgiLCJpbnN0cnVjdGlvbnMiLCJydWxlcyIsInR5cGUiLCJ1cmwiLCJxcyIsImxvbGNhdGlvbiIsImluZGV4T2YiLCJxdWVyeSIsInBhdGhuYW1lIiwiY2hhckF0IiwicmVxdWlyZWQiLCJwb3J0IiwiaG9zdCIsImhvc3RuYW1lIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImF1dGgiLCJvcmlnaW4iLCJocmVmIiwidG9TdHJpbmciLCJwYXJ0IiwiZm4iLCJ0ZXN0IiwicG9wIiwiaW5zIiwic3RyaW5naWZ5IiwiaGFzaCIsIk5hTiIsInVuZGVmaW5lZCIsImljb25Ob2RlIiwiaWNvbiIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmQiLCJzdHlsZSIsImRpc3BsYXkiLCJib2R5IiwiY2xvc2VFdmVudCIsIm9uY2xpY2siLCJpbm5lclRleHQiLCJkYXRhc2V0IiwidG9vbHRpcENvbnRlbnQiLCJtYXBwaW5nIiwiZmlyZSIsImJhci1jaGFydCIsImhpc3RvcnkiLCJjb2ciLCJzdWJzdHIiLCJsYXN0SW5kZXhPZiIsInNlYXJjaCIsImZiU2VhcmNoSW5wdXRzIiwid2luZG93IiwiX3VybFBhcnNlIiwiX3VybFBhcnNlMiIsInJldHJpZXZlRmJpZEZyb21VcmwiLCJlbmRzV2l0aCIsImluY2x1ZGVzIiwiZmJpZHNzcyIsInF1ZXVlIiwiaXNGZWVkSW5TY3JlZW4iLCJmZWVkIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcmVlbiIsInRvcCIsInNjcm9sbFkiLCJib3R0b20iLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRIZWlnaHQiLCJvZmZzZXRUb3AiLCJoZWlnaHQiLCJsYXN0WSIsImZlZWRzIiwib25zY3JvbGwiLCJpc1Nwb25zb3JlZCIsInJlbW92ZSIsImZlZWRUaW1lIiwiaXNQdWJsaWMiLCJnZXRBdHRyaWJ1dGUiLCJmYmlkIiwiY29uc29sZSIsImxvZyIsImJvb2xlYW4iLCJ0cmltIiwicXVlcnlzdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJxdWVyeXN0cmluZ2lmeSIsInByZWZpeCIsInBhaXJzIiwiaGFzIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2xvYmFsIiwiaWdub3JlIiwibG9jIiwiZmluYWxkZXN0aW5hdGlvbiIsInVuZXNjYXBlIiwiZyIsIkZ1bmN0aW9uIiwiZXZhbCIsIndlYnBhY2tDb250ZXh0IiwicmVxIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwibWFwIiwiRXJyb3IiLCIuL2hpc3RvcnkiLCIuL2hpc3RvcnkuanMiLCIuL2hvdHRlc3QiLCIuL2hvdHRlc3QuanMiLCIuL3NldHRpbmciLCIuL3NldHRpbmcuanMiLCIuL3N0YXRpc3RpY3MiLCIuL3N0YXRpc3RpY3MuanMiLCJrZXlzIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSJdLCJtYXBwaW5ncyI6IkNBQVMsU0FBVUEsR0NJbkIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFFLE9BR0EsSUFBQUMsR0FBQUYsRUFBQUQsSUFDQUksRUFBQUosRUFDQUssR0FBQSxFQUNBSCxXQVVBLE9BTkFKLEdBQUFFLEdBQUFNLEtBQUFILEVBQUFELFFBQUFDLElBQUFELFFBQUFILEdBR0FJLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUF2QkEsR0FBQUQsS0ErREEsT0FuQ0FGLEdBQUFRLEVBQUFULEVBR0FDLEVBQUFTLEVB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QmpoQ2pDLFFBQUFrTSxHQUFBQyxHQUNBLE1BQUFuTSxHQUFBb00sRUFBQUQsSUFFQSxRQUFBQyxHQUFBRCxHQUNBLEdBQUF2SSxHQUFBeUksRUFBQUYsRUFDQSxNQUFBdkksRUFBQSxHQUNBLFNBQUEwSSxPQUFBLHVCQUFBSCxFQUFBLEtBQ0EsT0FBQXZJLEdBakJBLEdBQUF5SSxJQUNBRSxZQUFBLEVBQ0FDLGVBQUEsRUFDQUMsWUFBQSxFQUNBQyxlQUFBLEVBQ0FDLFlBQUEsRUFDQUMsZUFBQSxFQUNBQyxlQUFBLEVBQ0FDLGtCQUFBLEVBV0FaLEdBQUFhLEtBQUEsV0FDQSxNQUFBaE0sUUFBQWdNLEtBQUFWLElBRUFILEVBQUF4SCxRQUFBMEgsRUFDQWhNLEVBQUFELFFBQUErTCxFQUNBQSxFQUFBdEksR0FBQSxJcEJraUNNLFNBQVV4RCxFQUFRRCxFQUFTSCxHQUVqQyxZQU9BLFNBQVNrQyxHQUF1QkMsR0FBTyxNQUFPQSxJQUFPQSxFQUFJZCxXQUFhYyxHQUFRUCxRQUFTTyxHcUJua0N2RixHQUFBRyxHQUFBdEMsRUFBQSxHckJpa0NJdUMsRUFBU0wsRUFBdUJJLEVxQi9qQ3BDZSxVQUFTMkosbUJBQXFCLFdBQzVCLEdBQUksZ0JBQWtCM0osU0FBUzRKLFdBQVksQ0FDekMsR0FBTWhMLEdBQU8sV0FDWCxHQUFJQSxHQUFNb0IsU0FBU1MsY0FBYyxxQkFNakMsT0FKTTdCLEtBQ0pBLEdBQU0sRUFBQU0sRUFBQVgsU0FBS3lCLFNBQVNTLGNBQWMsdUJBQXdCLFNBR3JELEVBQUF2QixFQUFBWCxTQUFLSyxFQUFLLFNBR25CakMsR0FBUSxHQUE0QmlDLEdBQ3BDakMsRUFBUSxHQUFnQ2lDLEdBQ3hDakMsRUFBUSxLQUNSQSxFQUFRLEtBRVJBLEVBQVEsTUFDUkEsRUFBUSxNQUNSQSxFQUFRIiwiZmlsZSI6ImNvbnRlbnQtc2NyaXB0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxOSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbi8qKlxuICogRmluZCBmaXJzdCBhbmNlc3RvciBvZiBlbCB3aXRoIHRhZ05hbWUgb3IgdW5kZWZpbmVkIGlmIG5vdCBmb3VuZC5cbiAqXG4gKiBAcGFyYW0gZWxcbiAqIEBwYXJhbSB0YWdOYW1lXG4gKiBAcmV0dXJucyB7Kn1cbiAqXG4gKiBAcmVmZXJlbmNlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzY4NTcxMTZcbiAqL1xuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGVsLCB0YWdOYW1lKSB7XG4gIHRhZ05hbWUgPSB0YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgd2hpbGUgKGVsICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG5cbiAgICBpZiAoZWwudGFnTmFtZSAmJiBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHRhZ05hbWUpIHtcbiAgICAgIHJldHVybiBlbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb20pIHtcbiAgLy9cbn07XG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb20pIHtcbiAgLy9cbn07XG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2Jvb2xlYW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblxudmFyIF9ib29sZWFuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jvb2xlYW4pO1xuXG52YXIgX3VwVG8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3VwVG8yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXBUbyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbSkge1xuICB2YXIgdGFibGUgPSBbeyB0aXRsZTogJ+eyvumBuOWLleaFiycsIGRlc2NyaXB0aW9uOiAn5pa85YuV5oWL5pmC5aCx5LiK5bWM5YWl5oiR5YCR57K+6YG455qE54ax6ZaA5YuV5oWLJywga2V5OiAnZmVhdHVyZWQtZmVlZCcgfSwgeyB0aXRsZTogJ+enu+mZpOW7o+WRiicsIGRlc2NyaXB0aW9uOiAn5pa85YuV5oWL5pmC5aCx5LiK56e76Zmk54K66LSK5Yqp55qE5YuV5oWLJywga2V5OiAncmVtb3ZlLWFkJyB9LCB7IHRpdGxlOiAn5ZCM5q2l5pCc5bCLJywgZGVzY3JpcHRpb246ICfmlrzoh4nmm7jmkJzlsIvmmYLvvIzkuIDkuKbmlrzmiJHlgJHlsIjlsazos4fmlpnluqvkuK3mkJzlsIsnLCBrZXk6ICdzeW5jLXNlYXJjaCcgfV07XG5cbiAgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KCdzZXR0aW5nJywgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHZhciBzZXR0aW5nID0gcmVzdWx0LnNldHRpbmcgfHwge307XG5cbiAgICBkb20uaW5uZXJIVE1MID0gdGFibGUucmVkdWNlKGZ1bmN0aW9uIChodG1sLCBpdGVtKSB7XG4gICAgICByZXR1cm4gaHRtbCArICgnXFxuPGRpdiBjbGFzcz1cInNldHRpbmctc2VjdGlvblwiPlxcbiAgPGRpdiBjbGFzcz1cInRpdGxlXCI+XFxuICAgIDxiPicgKyBpdGVtLnRpdGxlICsgJzwvYj5cXG4gIDwvZGl2PlxcbiAgXFxuICA8ZGl2IGNsYXNzPVwiZGVzY3JpcHRpb25cIj5cXG4gICAgPHNwYW4+JyArIGl0ZW0uZGVzY3JpcHRpb24gKyAnPC9zcGFuPlxcbiAgPC9kaXY+XFxuICBcXG4gIDxkaXYgY2xhc3M9XCJvcGVyYXRpb25cIj5cXG4gICAgPHNwYW4gY2xhc3M9XCJzdWNjZXNzLWljb25cIj5cXG4gICAgICA8aSBjbGFzcz1cImZhIGZhLWNoZWNrXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxcbiAgICA8L3NwYW4+XFxuICAgIFxcbiAgICA8c2VsZWN0IGlkPVwiJyArIGl0ZW0ua2V5ICsgJ1wiPlxcbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjBcIj5PZmY8L29wdGlvbj5cXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCIxXCIgJyArICgoMCwgX2Jvb2xlYW4yLmRlZmF1bHQpKHNldHRpbmdbaXRlbS5rZXldKSA/ICdzZWxlY3RlZCcgOiAnJykgKyAnPk9uPC9vcHRpb24+XFxuICAgIDwvc2VsZWN0PlxcbiAgPC9kaXY+XFxuPC9kaXY+Jyk7XG4gICAgfSwgJycpO1xuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmN1c3RvbS1tb2RhbCAuYm94IC5jb250ZW50IC5zZXR0aW5nLXNlY3Rpb24gLm9wZXJhdGlvbiBzZWxlY3QnKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHNldHRpbmdbZS50YXJnZXQuaWRdID0gKDAsIF9ib29sZWFuMi5kZWZhdWx0KShlLnRhcmdldC52YWx1ZSk7XG5cbiAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgc2V0dGluZzogc2V0dGluZyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIG4gPSAoMCwgX3VwVG8yLmRlZmF1bHQpKGUudGFyZ2V0LCAnZGl2JykucXVlcnlTZWxlY3Rvcignc3BhbicpO1xuXG4gICAgICAgICAgbi5jbGFzc05hbWUgPSBuLmNsYXNzTmFtZS5yZXBsYWNlKC8gP2FuaS9nLCAnJyk7XG5cbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG4uY2xhc3NOYW1lICs9ICcgYW5pJztcbiAgICAgICAgICB9LCAxKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9tKSB7XG4gIC8vXG59O1xuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHJlcXVpcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSlcbiAgLCBsb2xjYXRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KVxuICAsIHFzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNClcbiAgLCBwcm90b2NvbHJlID0gL14oW2Etel1bYS16MC05ListXSo6KT8oXFwvXFwvKT8oW1xcU1xcc10qKS9pO1xuXG4vKipcbiAqIFRoZXNlIGFyZSB0aGUgcGFyc2UgcnVsZXMgZm9yIHRoZSBVUkwgcGFyc2VyLCBpdCBpbmZvcm1zIHRoZSBwYXJzZXJcbiAqIGFib3V0OlxuICpcbiAqIDAuIFRoZSBjaGFyIGl0IE5lZWRzIHRvIHBhcnNlLCBpZiBpdCdzIGEgc3RyaW5nIGl0IHNob3VsZCBiZSBkb25lIHVzaW5nXG4gKiAgICBpbmRleE9mLCBSZWdFeHAgdXNpbmcgZXhlYyBhbmQgTmFOIG1lYW5zIHNldCBhcyBjdXJyZW50IHZhbHVlLlxuICogMS4gVGhlIHByb3BlcnR5IHdlIHNob3VsZCBzZXQgd2hlbiBwYXJzaW5nIHRoaXMgdmFsdWUuXG4gKiAyLiBJbmRpY2F0aW9uIGlmIGl0J3MgYmFja3dhcmRzIG9yIGZvcndhcmQgcGFyc2luZywgd2hlbiBzZXQgYXMgbnVtYmVyIGl0J3NcbiAqICAgIHRoZSB2YWx1ZSBvZiBleHRyYSBjaGFycyB0aGF0IHNob3VsZCBiZSBzcGxpdCBvZmYuXG4gKiAzLiBJbmhlcml0IGZyb20gbG9jYXRpb24gaWYgbm9uIGV4aXN0aW5nIGluIHRoZSBwYXJzZXIuXG4gKiA0LiBgdG9Mb3dlckNhc2VgIHRoZSByZXN1bHRpbmcgdmFsdWUuXG4gKi9cbnZhciBydWxlcyA9IFtcbiAgWycjJywgJ2hhc2gnXSwgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGZyb20gdGhlIGJhY2suXG4gIFsnPycsICdxdWVyeSddLCAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBiYWNrLlxuICBbJy8nLCAncGF0aG5hbWUnXSwgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgZnJvbSB0aGUgYmFjay5cbiAgWydAJywgJ2F1dGgnLCAxXSwgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGZyb20gdGhlIGZyb250LlxuICBbTmFOLCAnaG9zdCcsIHVuZGVmaW5lZCwgMSwgMV0sICAgICAgIC8vIFNldCBsZWZ0IG92ZXIgdmFsdWUuXG4gIFsvOihcXGQrKSQvLCAncG9ydCcsIHVuZGVmaW5lZCwgMV0sICAgIC8vIFJlZ0V4cCB0aGUgYmFjay5cbiAgW05hTiwgJ2hvc3RuYW1lJywgdW5kZWZpbmVkLCAxLCAxXSAgICAvLyBTZXQgbGVmdCBvdmVyLlxuXTtcblxuLyoqXG4gKiBAdHlwZWRlZiBQcm90b2NvbEV4dHJhY3RcbiAqIEB0eXBlIE9iamVjdFxuICogQHByb3BlcnR5IHtTdHJpbmd9IHByb3RvY29sIFByb3RvY29sIG1hdGNoZWQgaW4gdGhlIFVSTCwgaW4gbG93ZXJjYXNlLlxuICogQHByb3BlcnR5IHtCb29sZWFufSBzbGFzaGVzIGB0cnVlYCBpZiBwcm90b2NvbCBpcyBmb2xsb3dlZCBieSBcIi8vXCIsIGVsc2UgYGZhbHNlYC5cbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSByZXN0IFJlc3Qgb2YgdGhlIFVSTCB0aGF0IGlzIG5vdCBwYXJ0IG9mIHRoZSBwcm90b2NvbC5cbiAqL1xuXG4vKipcbiAqIEV4dHJhY3QgcHJvdG9jb2wgaW5mb3JtYXRpb24gZnJvbSBhIFVSTCB3aXRoL3dpdGhvdXQgZG91YmxlIHNsYXNoIChcIi8vXCIpLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBhZGRyZXNzIFVSTCB3ZSB3YW50IHRvIGV4dHJhY3QgZnJvbS5cbiAqIEByZXR1cm4ge1Byb3RvY29sRXh0cmFjdH0gRXh0cmFjdGVkIGluZm9ybWF0aW9uLlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RQcm90b2NvbChhZGRyZXNzKSB7XG4gIHZhciBtYXRjaCA9IHByb3RvY29scmUuZXhlYyhhZGRyZXNzKTtcblxuICByZXR1cm4ge1xuICAgIHByb3RvY29sOiBtYXRjaFsxXSA/IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgOiAnJyxcbiAgICBzbGFzaGVzOiAhIW1hdGNoWzJdLFxuICAgIHJlc3Q6IG1hdGNoWzNdXG4gIH07XG59XG5cbi8qKlxuICogUmVzb2x2ZSBhIHJlbGF0aXZlIFVSTCBwYXRobmFtZSBhZ2FpbnN0IGEgYmFzZSBVUkwgcGF0aG5hbWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlbGF0aXZlIFBhdGhuYW1lIG9mIHRoZSByZWxhdGl2ZSBVUkwuXG4gKiBAcGFyYW0ge1N0cmluZ30gYmFzZSBQYXRobmFtZSBvZiB0aGUgYmFzZSBVUkwuXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFJlc29sdmVkIHBhdGhuYW1lLlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmUocmVsYXRpdmUsIGJhc2UpIHtcbiAgdmFyIHBhdGggPSAoYmFzZSB8fCAnLycpLnNwbGl0KCcvJykuc2xpY2UoMCwgLTEpLmNvbmNhdChyZWxhdGl2ZS5zcGxpdCgnLycpKVxuICAgICwgaSA9IHBhdGgubGVuZ3RoXG4gICAgLCBsYXN0ID0gcGF0aFtpIC0gMV1cbiAgICAsIHVuc2hpZnQgPSBmYWxzZVxuICAgICwgdXAgPSAwO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAocGF0aFtpXSA9PT0gJy4nKSB7XG4gICAgICBwYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKHBhdGhbaV0gPT09ICcuLicpIHtcbiAgICAgIHBhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBpZiAoaSA9PT0gMCkgdW5zaGlmdCA9IHRydWU7XG4gICAgICBwYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKHVuc2hpZnQpIHBhdGgudW5zaGlmdCgnJyk7XG4gIGlmIChsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJykgcGF0aC5wdXNoKCcnKTtcblxuICByZXR1cm4gcGF0aC5qb2luKCcvJyk7XG59XG5cbi8qKlxuICogVGhlIGFjdHVhbCBVUkwgaW5zdGFuY2UuIEluc3RlYWQgb2YgcmV0dXJuaW5nIGFuIG9iamVjdCB3ZSd2ZSBvcHRlZC1pbiB0b1xuICogY3JlYXRlIGFuIGFjdHVhbCBjb25zdHJ1Y3RvciBhcyBpdCdzIG11Y2ggbW9yZSBtZW1vcnkgZWZmaWNpZW50IGFuZFxuICogZmFzdGVyIGFuZCBpdCBwbGVhc2VzIG15IE9DRC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSBhZGRyZXNzIFVSTCB3ZSB3YW50IHRvIHBhcnNlLlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBsb2NhdGlvbiBMb2NhdGlvbiBkZWZhdWx0cyBmb3IgcmVsYXRpdmUgcGF0aHMuXG4gKiBAcGFyYW0ge0Jvb2xlYW58RnVuY3Rpb259IHBhcnNlciBQYXJzZXIgZm9yIHRoZSBxdWVyeSBzdHJpbmcuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBVUkwoYWRkcmVzcywgbG9jYXRpb24sIHBhcnNlcikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVVJMKSkge1xuICAgIHJldHVybiBuZXcgVVJMKGFkZHJlc3MsIGxvY2F0aW9uLCBwYXJzZXIpO1xuICB9XG5cbiAgdmFyIHJlbGF0aXZlLCBleHRyYWN0ZWQsIHBhcnNlLCBpbnN0cnVjdGlvbiwgaW5kZXgsIGtleVxuICAgICwgaW5zdHJ1Y3Rpb25zID0gcnVsZXMuc2xpY2UoKVxuICAgICwgdHlwZSA9IHR5cGVvZiBsb2NhdGlvblxuICAgICwgdXJsID0gdGhpc1xuICAgICwgaSA9IDA7XG5cbiAgLy9cbiAgLy8gVGhlIGZvbGxvd2luZyBpZiBzdGF0ZW1lbnRzIGFsbG93cyB0aGlzIG1vZHVsZSB0d28gaGF2ZSBjb21wYXRpYmlsaXR5IHdpdGhcbiAgLy8gMiBkaWZmZXJlbnQgQVBJOlxuICAvL1xuICAvLyAxLiBOb2RlLmpzJ3MgYHVybC5wYXJzZWAgYXBpIHdoaWNoIGFjY2VwdHMgYSBVUkwsIGJvb2xlYW4gYXMgYXJndW1lbnRzXG4gIC8vICAgIHdoZXJlIHRoZSBib29sZWFuIGluZGljYXRlcyB0aGF0IHRoZSBxdWVyeSBzdHJpbmcgc2hvdWxkIGFsc28gYmUgcGFyc2VkLlxuICAvL1xuICAvLyAyLiBUaGUgYFVSTGAgaW50ZXJmYWNlIG9mIHRoZSBicm93c2VyIHdoaWNoIGFjY2VwdHMgYSBVUkwsIG9iamVjdCBhc1xuICAvLyAgICBhcmd1bWVudHMuIFRoZSBzdXBwbGllZCBvYmplY3Qgd2lsbCBiZSB1c2VkIGFzIGRlZmF1bHQgdmFsdWVzIC8gZmFsbC1iYWNrXG4gIC8vICAgIGZvciByZWxhdGl2ZSBwYXRocy5cbiAgLy9cbiAgaWYgKCdvYmplY3QnICE9PSB0eXBlICYmICdzdHJpbmcnICE9PSB0eXBlKSB7XG4gICAgcGFyc2VyID0gbG9jYXRpb247XG4gICAgbG9jYXRpb24gPSBudWxsO1xuICB9XG5cbiAgaWYgKHBhcnNlciAmJiAnZnVuY3Rpb24nICE9PSB0eXBlb2YgcGFyc2VyKSBwYXJzZXIgPSBxcy5wYXJzZTtcblxuICBsb2NhdGlvbiA9IGxvbGNhdGlvbihsb2NhdGlvbik7XG5cbiAgLy9cbiAgLy8gRXh0cmFjdCBwcm90b2NvbCBpbmZvcm1hdGlvbiBiZWZvcmUgcnVubmluZyB0aGUgaW5zdHJ1Y3Rpb25zLlxuICAvL1xuICBleHRyYWN0ZWQgPSBleHRyYWN0UHJvdG9jb2woYWRkcmVzcyB8fCAnJyk7XG4gIHJlbGF0aXZlID0gIWV4dHJhY3RlZC5wcm90b2NvbCAmJiAhZXh0cmFjdGVkLnNsYXNoZXM7XG4gIHVybC5zbGFzaGVzID0gZXh0cmFjdGVkLnNsYXNoZXMgfHwgcmVsYXRpdmUgJiYgbG9jYXRpb24uc2xhc2hlcztcbiAgdXJsLnByb3RvY29sID0gZXh0cmFjdGVkLnByb3RvY29sIHx8IGxvY2F0aW9uLnByb3RvY29sIHx8ICcnO1xuICBhZGRyZXNzID0gZXh0cmFjdGVkLnJlc3Q7XG5cbiAgLy9cbiAgLy8gV2hlbiB0aGUgYXV0aG9yaXR5IGNvbXBvbmVudCBpcyBhYnNlbnQgdGhlIFVSTCBzdGFydHMgd2l0aCBhIHBhdGhcbiAgLy8gY29tcG9uZW50LlxuICAvL1xuICBpZiAoIWV4dHJhY3RlZC5zbGFzaGVzKSBpbnN0cnVjdGlvbnNbMl0gPSBbLyguKikvLCAncGF0aG5hbWUnXTtcblxuICBmb3IgKDsgaSA8IGluc3RydWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIGluc3RydWN0aW9uID0gaW5zdHJ1Y3Rpb25zW2ldO1xuICAgIHBhcnNlID0gaW5zdHJ1Y3Rpb25bMF07XG4gICAga2V5ID0gaW5zdHJ1Y3Rpb25bMV07XG5cbiAgICBpZiAocGFyc2UgIT09IHBhcnNlKSB7XG4gICAgICB1cmxba2V5XSA9IGFkZHJlc3M7XG4gICAgfSBlbHNlIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHBhcnNlKSB7XG4gICAgICBpZiAofihpbmRleCA9IGFkZHJlc3MuaW5kZXhPZihwYXJzZSkpKSB7XG4gICAgICAgIGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIGluc3RydWN0aW9uWzJdKSB7XG4gICAgICAgICAgdXJsW2tleV0gPSBhZGRyZXNzLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgICBhZGRyZXNzID0gYWRkcmVzcy5zbGljZShpbmRleCArIGluc3RydWN0aW9uWzJdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cmxba2V5XSA9IGFkZHJlc3Muc2xpY2UoaW5kZXgpO1xuICAgICAgICAgIGFkZHJlc3MgPSBhZGRyZXNzLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKGluZGV4ID0gcGFyc2UuZXhlYyhhZGRyZXNzKSkpIHtcbiAgICAgIHVybFtrZXldID0gaW5kZXhbMV07XG4gICAgICBhZGRyZXNzID0gYWRkcmVzcy5zbGljZSgwLCBpbmRleC5pbmRleCk7XG4gICAgfVxuXG4gICAgdXJsW2tleV0gPSB1cmxba2V5XSB8fCAoXG4gICAgICByZWxhdGl2ZSAmJiBpbnN0cnVjdGlvblszXSA/IGxvY2F0aW9uW2tleV0gfHwgJycgOiAnJ1xuICAgICk7XG5cbiAgICAvL1xuICAgIC8vIEhvc3RuYW1lLCBob3N0IGFuZCBwcm90b2NvbCBzaG91bGQgYmUgbG93ZXJjYXNlZCBzbyB0aGV5IGNhbiBiZSB1c2VkIHRvXG4gICAgLy8gY3JlYXRlIGEgcHJvcGVyIGBvcmlnaW5gLlxuICAgIC8vXG4gICAgaWYgKGluc3RydWN0aW9uWzRdKSB1cmxba2V5XSA9IHVybFtrZXldLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICAvL1xuICAvLyBBbHNvIHBhcnNlIHRoZSBzdXBwbGllZCBxdWVyeSBzdHJpbmcgaW4gdG8gYW4gb2JqZWN0LiBJZiB3ZSdyZSBzdXBwbGllZFxuICAvLyB3aXRoIGEgY3VzdG9tIHBhcnNlciBhcyBmdW5jdGlvbiB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGJ1aWxkLWluXG4gIC8vIHBhcnNlci5cbiAgLy9cbiAgaWYgKHBhcnNlcikgdXJsLnF1ZXJ5ID0gcGFyc2VyKHVybC5xdWVyeSk7XG5cbiAgLy9cbiAgLy8gSWYgdGhlIFVSTCBpcyByZWxhdGl2ZSwgcmVzb2x2ZSB0aGUgcGF0aG5hbWUgYWdhaW5zdCB0aGUgYmFzZSBVUkwuXG4gIC8vXG4gIGlmIChcbiAgICAgIHJlbGF0aXZlXG4gICAgJiYgbG9jYXRpb24uc2xhc2hlc1xuICAgICYmIHVybC5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJ1xuICAgICYmICh1cmwucGF0aG5hbWUgIT09ICcnIHx8IGxvY2F0aW9uLnBhdGhuYW1lICE9PSAnJylcbiAgKSB7XG4gICAgdXJsLnBhdGhuYW1lID0gcmVzb2x2ZSh1cmwucGF0aG5hbWUsIGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfVxuXG4gIC8vXG4gIC8vIFdlIHNob3VsZCBub3QgYWRkIHBvcnQgbnVtYmVycyBpZiB0aGV5IGFyZSBhbHJlYWR5IHRoZSBkZWZhdWx0IHBvcnQgbnVtYmVyXG4gIC8vIGZvciBhIGdpdmVuIHByb3RvY29sLiBBcyB0aGUgaG9zdCBhbHNvIGNvbnRhaW5zIHRoZSBwb3J0IG51bWJlciB3ZSdyZSBnb2luZ1xuICAvLyBvdmVycmlkZSBpdCB3aXRoIHRoZSBob3N0bmFtZSB3aGljaCBjb250YWlucyBubyBwb3J0IG51bWJlci5cbiAgLy9cbiAgaWYgKCFyZXF1aXJlZCh1cmwucG9ydCwgdXJsLnByb3RvY29sKSkge1xuICAgIHVybC5ob3N0ID0gdXJsLmhvc3RuYW1lO1xuICAgIHVybC5wb3J0ID0gJyc7XG4gIH1cblxuICAvL1xuICAvLyBQYXJzZSBkb3duIHRoZSBgYXV0aGAgZm9yIHRoZSB1c2VybmFtZSBhbmQgcGFzc3dvcmQuXG4gIC8vXG4gIHVybC51c2VybmFtZSA9IHVybC5wYXNzd29yZCA9ICcnO1xuICBpZiAodXJsLmF1dGgpIHtcbiAgICBpbnN0cnVjdGlvbiA9IHVybC5hdXRoLnNwbGl0KCc6Jyk7XG4gICAgdXJsLnVzZXJuYW1lID0gaW5zdHJ1Y3Rpb25bMF0gfHwgJyc7XG4gICAgdXJsLnBhc3N3b3JkID0gaW5zdHJ1Y3Rpb25bMV0gfHwgJyc7XG4gIH1cblxuICB1cmwub3JpZ2luID0gdXJsLnByb3RvY29sICYmIHVybC5ob3N0ICYmIHVybC5wcm90b2NvbCAhPT0gJ2ZpbGU6J1xuICAgID8gdXJsLnByb3RvY29sICsnLy8nKyB1cmwuaG9zdFxuICAgIDogJ251bGwnO1xuXG4gIC8vXG4gIC8vIFRoZSBocmVmIGlzIGp1c3QgdGhlIGNvbXBpbGVkIHJlc3VsdC5cbiAgLy9cbiAgdXJsLmhyZWYgPSB1cmwudG9TdHJpbmcoKTtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGNvbnZlbmllbmNlIG1ldGhvZCBmb3IgY2hhbmdpbmcgcHJvcGVydGllcyBpbiB0aGUgVVJMIGluc3RhbmNlIHRvXG4gKiBpbnN1cmUgdGhhdCB0aGV5IGFsbCBwcm9wYWdhdGUgY29ycmVjdGx5LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXJ0ICAgICAgICAgIFByb3BlcnR5IHdlIG5lZWQgdG8gYWRqdXN0LlxuICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgICAgICAgICAgVGhlIG5ld2x5IGFzc2lnbmVkIHZhbHVlLlxuICogQHBhcmFtIHtCb29sZWFufEZ1bmN0aW9ufSBmbiAgV2hlbiBzZXR0aW5nIHRoZSBxdWVyeSwgaXQgd2lsbCBiZSB0aGUgZnVuY3Rpb25cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgdG8gcGFyc2UgdGhlIHF1ZXJ5LlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2hlbiBzZXR0aW5nIHRoZSBwcm90b2NvbCwgZG91YmxlIHNsYXNoIHdpbGwgYmVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQgZnJvbSB0aGUgZmluYWwgdXJsIGlmIGl0IGlzIHRydWUuXG4gKiBAcmV0dXJucyB7VVJMfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gc2V0KHBhcnQsIHZhbHVlLCBmbikge1xuICB2YXIgdXJsID0gdGhpcztcblxuICBzd2l0Y2ggKHBhcnQpIHtcbiAgICBjYXNlICdxdWVyeSc6XG4gICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgdmFsdWUgPSAoZm4gfHwgcXMucGFyc2UpKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3BvcnQnOlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG5cbiAgICAgIGlmICghcmVxdWlyZWQodmFsdWUsIHVybC5wcm90b2NvbCkpIHtcbiAgICAgICAgdXJsLmhvc3QgPSB1cmwuaG9zdG5hbWU7XG4gICAgICAgIHVybFtwYXJ0XSA9ICcnO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICB1cmwuaG9zdCA9IHVybC5ob3N0bmFtZSArJzonKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdob3N0bmFtZSc6XG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcblxuICAgICAgaWYgKHVybC5wb3J0KSB2YWx1ZSArPSAnOicrIHVybC5wb3J0O1xuICAgICAgdXJsLmhvc3QgPSB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaG9zdCc6XG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcblxuICAgICAgaWYgKC86XFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3BsaXQoJzonKTtcbiAgICAgICAgdXJsLnBvcnQgPSB2YWx1ZS5wb3AoKTtcbiAgICAgICAgdXJsLmhvc3RuYW1lID0gdmFsdWUuam9pbignOicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJsLmhvc3RuYW1lID0gdmFsdWU7XG4gICAgICAgIHVybC5wb3J0ID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncHJvdG9jb2wnOlxuICAgICAgdXJsLnByb3RvY29sID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHVybC5zbGFzaGVzID0gIWZuO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwYXRobmFtZSc6XG4gICAgICB1cmwucGF0aG5hbWUgPSB2YWx1ZS5sZW5ndGggJiYgdmFsdWUuY2hhckF0KDApICE9PSAnLycgPyAnLycgKyB2YWx1ZSA6IHZhbHVlO1xuXG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaW5zID0gcnVsZXNbaV07XG5cbiAgICBpZiAoaW5zWzRdKSB1cmxbaW5zWzFdXSA9IHVybFtpbnNbMV1dLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICB1cmwub3JpZ2luID0gdXJsLnByb3RvY29sICYmIHVybC5ob3N0ICYmIHVybC5wcm90b2NvbCAhPT0gJ2ZpbGU6J1xuICAgID8gdXJsLnByb3RvY29sICsnLy8nKyB1cmwuaG9zdFxuICAgIDogJ251bGwnO1xuXG4gIHVybC5ocmVmID0gdXJsLnRvU3RyaW5nKCk7XG5cbiAgcmV0dXJuIHVybDtcbn07XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBwcm9wZXJ0aWVzIGJhY2sgaW4gdG8gYSB2YWxpZCBhbmQgZnVsbCBVUkwgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZ2lmeSBPcHRpb25hbCBxdWVyeSBzdHJpbmdpZnkgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcoc3RyaW5naWZ5KSB7XG4gIGlmICghc3RyaW5naWZ5IHx8ICdmdW5jdGlvbicgIT09IHR5cGVvZiBzdHJpbmdpZnkpIHN0cmluZ2lmeSA9IHFzLnN0cmluZ2lmeTtcblxuICB2YXIgcXVlcnlcbiAgICAsIHVybCA9IHRoaXNcbiAgICAsIHByb3RvY29sID0gdXJsLnByb3RvY29sO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5jaGFyQXQocHJvdG9jb2wubGVuZ3RoIC0gMSkgIT09ICc6JykgcHJvdG9jb2wgKz0gJzonO1xuXG4gIHZhciByZXN1bHQgPSBwcm90b2NvbCArICh1cmwuc2xhc2hlcyA/ICcvLycgOiAnJyk7XG5cbiAgaWYgKHVybC51c2VybmFtZSkge1xuICAgIHJlc3VsdCArPSB1cmwudXNlcm5hbWU7XG4gICAgaWYgKHVybC5wYXNzd29yZCkgcmVzdWx0ICs9ICc6JysgdXJsLnBhc3N3b3JkO1xuICAgIHJlc3VsdCArPSAnQCc7XG4gIH1cblxuICByZXN1bHQgKz0gdXJsLmhvc3QgKyB1cmwucGF0aG5hbWU7XG5cbiAgcXVlcnkgPSAnb2JqZWN0JyA9PT0gdHlwZW9mIHVybC5xdWVyeSA/IHN0cmluZ2lmeSh1cmwucXVlcnkpIDogdXJsLnF1ZXJ5O1xuICBpZiAocXVlcnkpIHJlc3VsdCArPSAnPycgIT09IHF1ZXJ5LmNoYXJBdCgwKSA/ICc/JysgcXVlcnkgOiBxdWVyeTtcblxuICBpZiAodXJsLmhhc2gpIHJlc3VsdCArPSB1cmwuaGFzaDtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5VUkwucHJvdG90eXBlID0geyBzZXQ6IHNldCwgdG9TdHJpbmc6IHRvU3RyaW5nIH07XG5cbi8vXG4vLyBFeHBvc2UgdGhlIFVSTCBwYXJzZXIgYW5kIHNvbWUgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRoYXQgbWlnaHQgYmUgdXNlZnVsIGZvclxuLy8gb3RoZXJzIG9yIHRlc3RpbmcuXG4vL1xuVVJMLmV4dHJhY3RQcm90b2NvbCA9IGV4dHJhY3RQcm90b2NvbDtcblVSTC5sb2NhdGlvbiA9IGxvbGNhdGlvbjtcblVSTC5xcyA9IHFzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVSTDtcblxuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF91cFRvID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF91cFRvMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VwVG8pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIENyZWF0ZSBhIGZvbnQgYXdlc29tZSBpY29uIG5vZGUuXG4gKlxuICogQHBhcmFtIGljb25cbiAqIEBwYXJhbSBuYW1lXG4gKlxuICogQHJldHVybnMgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGljb25Ob2RlKGljb24sIG5hbWUpIHtcbiAgcmV0dXJuICc8aSBjbGFzcz1cImZhIGZhLWZ3IGZhLScgKyBpY29uICsgJ1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGRhdGEtaG92ZXI9XCJ0b29sdGlwXCIgZGF0YS10b29sdGlwLWRlbGF5PVwiMzUwXCIgZGF0YS10b29sdGlwLWNvbnRlbnQ9XCInICsgbmFtZSArICdcIj48L2k+Jztcbn1cblxuLyoqXG4gKiBBZGQgYnV0dG9ucyBpbiB0aGUgcmlnaHQgb2Ygc2VhcmNoIGJhci5cbiAqXG4gKiBAcmV0dXJucyB2b2lkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gIG5vZGUuY2xhc3NOYW1lID0gJ2N1c3RvbS1idXR0b24nO1xuICBub2RlLmlubmVySFRNTCA9ICdcXG4nICsgaWNvbk5vZGUoJ2ZpcmUnLCAn54ax6ZaA57KJ5bCIJykgKyAnXFxuJyArIGljb25Ob2RlKCdiYXItY2hhcnQnLCAn5YCL5Lq657Wx6KiIJykgKyAnXFxuJyArIGljb25Ob2RlKCdoaXN0b3J5JywgJ+att+WPsuWbnumhpycpICsgJ1xcbicgKyBpY29uTm9kZSgnY29nJywgJ+ioreWumicpO1xuXG4gICgwLCBfdXBUbzIuZGVmYXVsdCkoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2LmN1c3RvbS1zZWFyY2gtYmFyJyksICdkaXYnKS5hcHBlbmQobm9kZSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyoqXG4gKiBBZGQgbW9kYWwuXG4gKlxuICogQHJldHVybnMgdm9pZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICBub2RlLmNsYXNzTmFtZSA9ICdjdXN0b20tbW9kYWwnO1xuICBub2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIG5vZGUuaW5uZXJIVE1MID0gJ1xcbjxkaXYgY2xhc3M9XCJiYWNrZ3JvdW5kXCI+PC9kaXY+XFxuXFxuPGRpdiBjbGFzcz1cImJveFwiPlxcbiAgPGRpdiBjbGFzcz1cImhlYWRlclwiPlxcbiAgICA8ZGl2IHN0eWxlPVwibWFyZ2luLWxlZnQ6IDFyZW07XCI+XFxuICAgICAgPGIgaWQ9XCJjdXN0b20tbW9kYWwtdGl0bGVcIiBzdHlsZT1cImZvbnQtc2l6ZTogMTZweDtcIj48L2I+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVwiY2xvc2UtYnV0dG9uXCI+XFxuICAgICAgPGkgY2xhc3M9XCJmYSBmYS1sZyBmYS10aW1lc1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG4gIFxcbiAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj48L2Rpdj5cXG48L2Rpdj4nO1xuXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kKG5vZGUpO1xuXG4gIHZhciBjbG9zZUV2ZW50ID0gZnVuY3Rpb24gY2xvc2VFdmVudCgpIHtcbiAgICBub2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH07XG5cbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmN1c3RvbS1tb2RhbCAuYmFja2dyb3VuZCcpLm9uY2xpY2sgPSBjbG9zZUV2ZW50O1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY3VzdG9tLW1vZGFsIC5jbG9zZS1idXR0b24gaScpLm9uY2xpY2sgPSBjbG9zZUV2ZW50O1xufTtcblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogQWRkIGNsYXNzIHRvIGZhY2Vib29rIG5hdmJhci5cbiAqXG4gKiBAcGFyYW0gZG9tXG4gKlxuICogQHJldHVybnMgdm9pZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb20pIHtcbiAgZG9tLmNsYXNzTmFtZSArPSAnIGN1c3RvbS1uYXZiYXInO1xufTtcblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogQWRkIHNlYXJjaCBiYXIgaW4gdGhlIHJpZ2h0IG9mIGZhY2Vib29rIHNlYXJjaCBiYXIuXG4gKlxuICogQHBhcmFtIGRvbVxuICpcbiAqIEByZXR1cm5zIHZvaWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9tKSB7XG4gIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgbm9kZS5jbGFzc05hbWUgPSAnY3VzdG9tLXNlYXJjaC1iYXInO1xuICBub2RlLmlubmVySFRNTCA9ICdcXG48Zm9ybT5cXG4gIDxkaXY+XFxuICAgIDxpbnB1dCBpZD1cImN1c3RvbS1zZWFyY2gtaW5wdXRcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiU2VhcmNoIERCXCI+XFxuICA8L2Rpdj5cXG48L2Zvcm0+JztcblxuICBkb20uYXBwZW5kKG5vZGUpO1xufTtcblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmN1c3RvbS1idXR0b24gaScpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jdXN0b20tbW9kYWwnKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjdXN0b20tbW9kYWwtdGl0bGUnKS5pbm5lclRleHQgPSBlLnRhcmdldC5kYXRhc2V0LnRvb2x0aXBDb250ZW50O1xuXG4gICAgICB2YXIgbWFwcGluZyA9IHtcbiAgICAgICAgJ2ZpcmUnOiAnaG90dGVzdCcsXG4gICAgICAgICdiYXItY2hhcnQnOiAnc3RhdGlzdGljcycsXG4gICAgICAgICdoaXN0b3J5JzogJ2hpc3RvcnknLFxuICAgICAgICAnY29nJzogJ3NldHRpbmcnXG4gICAgICB9O1xuXG4gICAgICB2YXIgbmFtZSA9IGUudGFyZ2V0LmNsYXNzTmFtZTtcblxuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKG5hbWUubGFzdEluZGV4T2YoJ2ZhLScpICsgMyk7XG5cbiAgICAgIF9fd2VicGFja19yZXF1aXJlX18oMTgpKFwiLi9cIiArIG1hcHBpbmdbbmFtZV0pKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jdXN0b20tbW9kYWwgLmJveCAuY29udGVudCcpKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogTGlzdGVuIGZvciBmYWNlYm9vayBzZWFyY2guXG4gKlxuICogQHJldHVybnMgdm9pZFxuICovXG52YXIgc2VhcmNoID0gZnVuY3Rpb24gc2VhcmNoKCkge1xuICB2YXIgZmJTZWFyY2hJbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtuYW1lPVwicVwiXScpO1xuXG4gIGlmICgyID4gZmJTZWFyY2hJbnB1dHMubGVuZ3RoICYmICFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcScpKSB7XG4gICAgd2luZG93LnNldFRpbWVvdXQoc2VhcmNoLCAxMDAwKTtcbiAgfSBlbHNlIHtcbiAgICBmYlNlYXJjaElucHV0cy5pdGVtKGZiU2VhcmNoSW5wdXRzLmxlbmd0aCAtIDEpLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjdXN0b20tc2VhcmNoLWlucHV0JykudmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcbiAgICB9KTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzZWFyY2g7XG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF91cmxQYXJzZSA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfdXJsUGFyc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXJsUGFyc2UpO1xuXG52YXIgX3VwVG8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3VwVG8yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXBUbyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmV0cmlldmVGYmlkRnJvbVVybCA9IGZ1bmN0aW9uIHJldHJpZXZlRmJpZEZyb21VcmwodXJsKSB7XG4gICAgaWYgKHVybC5lbmRzV2l0aCgnOjMnKSB8fCB1cmwuaW5jbHVkZXMoJ3N0b3J5X2ZiaWQnKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmICh1cmwuaW5jbHVkZXMoJ3Bob3RvLnBocCcpKSB7XG4gICAgICByZXR1cm4gKDAsIF91cmxQYXJzZTIuZGVmYXVsdCkodXJsLCB0cnVlKS5xdWVyeS5mYmlkc3NzIHx8IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHF1ZXVlID0gdXJsLnNwbGl0KCcvJyk7XG5cbiAgICBpZiAodXJsLmluY2x1ZGVzKCdwaG90b3MnKSB8fCB1cmwuZW5kc1dpdGgoJy8nKSkge1xuICAgICAgcXVldWUucG9wKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHF1ZXVlLnBvcCgpO1xuICB9O1xuICB2YXIgaXNGZWVkSW5TY3JlZW4gPSBmdW5jdGlvbiBpc0ZlZWRJblNjcmVlbihmZWVkKSB7XG4gICAgdmFyIHJlY3QgPSBmZWVkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciBzY3JlZW4gPSB7XG4gICAgICB0b3A6IHdpbmRvdy5zY3JvbGxZLFxuICAgICAgYm90dG9tOiB3aW5kb3cuc2Nyb2xsWSArIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICB9O1xuICAgIHZhciBlbCA9IHtcbiAgICAgIHRvcDogZmVlZC5vZmZzZXRUb3AgKyByZWN0LmhlaWdodCAvIDMsXG4gICAgICBib3R0b206IGZlZWQub2Zmc2V0VG9wICsgcmVjdC5oZWlnaHQgLyAzICogMlxuICAgIH07XG5cbiAgICBpZiAoZWwudG9wID4gc2NyZWVuLnRvcCAmJiBlbC50b3AgPCBzY3JlZW4uYm90dG9tKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGVsLmJvdHRvbSA+IHNjcmVlbi50b3AgJiYgZWwuYm90dG9tIDwgc2NyZWVuLmJvdHRvbSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHZhciBsYXN0WSA9IDA7XG4gIHZhciBmZWVkcyA9IFtdO1xuXG4gIHdpbmRvdy5vbnNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJy8nICE9PSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxhc3RZID0gMDtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2RpdltpZF49XCJoeXBlcmZlZWRfc3RvcnlfaWRcIl0nKS5mb3JFYWNoKGZ1bmN0aW9uIChmZWVkKSB7XG4gICAgICB2YXIgaXNTcG9uc29yZWQgPSBmZWVkLnF1ZXJ5U2VsZWN0b3IoJ2FbaHJlZl49XCJodHRwczovL2wuZmFjZWJvb2suY29tL2wucGhwXCJdJyk7XG5cbiAgICAgIGlmIChpc1Nwb25zb3JlZCkge1xuICAgICAgICBzd2l0Y2ggKGlzU3BvbnNvcmVkLmlubmVyVGV4dCkge1xuICAgICAgICAgIGNhc2UgJ1Nwb25zb3JlZCc6XG4gICAgICAgICAgY2FzZSAn6LSK5YqpJzpcbiAgICAgICAgICBjYXNlICfluoPlkYonOlxuICAgICAgICAgICAgcmV0dXJuIGZlZWQucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGZlZWRUaW1lID0gZmVlZC5xdWVyeVNlbGVjdG9yKCdhYmJyLnRpbWVzdGFtcC5saXZldGltZXN0YW1wJyk7XG5cbiAgICAgIGlmICghZmVlZFRpbWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNQdWJsaWMgPSAoMCwgX3VwVG8yLmRlZmF1bHQpKGZlZWRUaW1lLCAnZGl2JykucXVlcnlTZWxlY3RvcignW2RhdGEtdG9vbHRpcC1jb250ZW50XScpO1xuXG4gICAgICBpZiAoIWlzUHVibGljKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaXNQdWJsaWMgPSBpc1B1YmxpYy5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb250ZW50Jyk7XG5cbiAgICAgIGlmIChpc1B1YmxpYy5pbmNsdWRlcygnUHVibGljJykgfHwgaXNQdWJsaWMuaW5jbHVkZXMoJ+WFrOmWiycpKSB7XG4gICAgICAgIHZhciBmYmlkID0gcmV0cmlldmVGYmlkRnJvbVVybCgoMCwgX3VwVG8yLmRlZmF1bHQpKGZlZWRUaW1lLCAnYScpLmhyZWYpO1xuXG4gICAgICAgIGlmIChmYmlkICYmICFmZWVkcy5pbmNsdWRlcyhmYmlkKSkge1xuICAgICAgICAgIGZlZWRzLnB1c2goZmJpZCk7XG5cbiAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBmZWVkczogZmVlZHMgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGZWVkSW5TY3JlZW4oZmVlZCkpIHtcbiAgICAgICAgICBpZiAoMCA+IHdpbmRvdy5zY3JvbGxZIC0gbGFzdFkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdiYWNrJywgZmJpZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGZiaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbGFzdFkgPSB3aW5kb3cuc2Nyb2xsWTtcbiAgfTtcbn07XG5cbi8qKiovIH0pLFxuLyogMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGJvb2xlYW4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gL14odHJ1ZXx0fHllc3x5fDEpJC9pLnRlc3QodmFsdWUudHJpbSgpKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAxO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBib29sZWFuO1xuXG5cbi8qKiovIH0pLFxuLyogMTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogU2ltcGxlIHF1ZXJ5IHN0cmluZyBwYXJzZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHF1ZXJ5IFRoZSBxdWVyeSBzdHJpbmcgdGhhdCBuZWVkcyB0byBiZSBwYXJzZWQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcXVlcnlzdHJpbmcocXVlcnkpIHtcbiAgdmFyIHBhcnNlciA9IC8oW149PyZdKyk9PyhbXiZdKikvZ1xuICAgICwgcmVzdWx0ID0ge31cbiAgICAsIHBhcnQ7XG5cbiAgLy9cbiAgLy8gTGl0dGxlIG5pZnR5IHBhcnNpbmcgaGFjaywgbGV2ZXJhZ2UgdGhlIGZhY3QgdGhhdCBSZWdFeHAuZXhlYyBpbmNyZW1lbnRzXG4gIC8vIHRoZSBsYXN0SW5kZXggcHJvcGVydHkgc28gd2UgY2FuIGNvbnRpbnVlIGV4ZWN1dGluZyB0aGlzIGxvb3AgdW50aWwgd2UndmVcbiAgLy8gcGFyc2VkIGFsbCByZXN1bHRzLlxuICAvL1xuICBmb3IgKDtcbiAgICBwYXJ0ID0gcGFyc2VyLmV4ZWMocXVlcnkpO1xuICAgIHJlc3VsdFtkZWNvZGVVUklDb21wb25lbnQocGFydFsxXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcnRbMl0pXG4gICk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYSBxdWVyeSBzdHJpbmcgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogT2JqZWN0IHRoYXQgc2hvdWxkIGJlIHRyYW5zZm9ybWVkLlxuICogQHBhcmFtIHtTdHJpbmd9IHByZWZpeCBPcHRpb25hbCBwcmVmaXguXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcXVlcnlzdHJpbmdpZnkob2JqLCBwcmVmaXgpIHtcbiAgcHJlZml4ID0gcHJlZml4IHx8ICcnO1xuXG4gIHZhciBwYWlycyA9IFtdO1xuXG4gIC8vXG4gIC8vIE9wdGlvbmFsbHkgcHJlZml4IHdpdGggYSAnPycgaWYgbmVlZGVkXG4gIC8vXG4gIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIHByZWZpeCkgcHJlZml4ID0gJz8nO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoaGFzLmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICBwYWlycy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsnPScrIGVuY29kZVVSSUNvbXBvbmVudChvYmpba2V5XSkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYWlycy5sZW5ndGggPyBwcmVmaXggKyBwYWlycy5qb2luKCcmJykgOiAnJztcbn1cblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbmV4cG9ydHMuc3RyaW5naWZ5ID0gcXVlcnlzdHJpbmdpZnk7XG5leHBvcnRzLnBhcnNlID0gcXVlcnlzdHJpbmc7XG5cblxuLyoqKi8gfSksXG4vKiAxNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKipcbiAqIENoZWNrIGlmIHdlJ3JlIHJlcXVpcmVkIHRvIGFkZCBhIHBvcnQgbnVtYmVyLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkZWZhdWx0LXBvcnRcbiAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gcG9ydCBQb3J0IG51bWJlciB3ZSBuZWVkIHRvIGNoZWNrXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvdG9jb2wgUHJvdG9jb2wgd2UgbmVlZCB0byBjaGVjayBhZ2FpbnN0LlxuICogQHJldHVybnMge0Jvb2xlYW59IElzIGl0IGEgZGVmYXVsdCBwb3J0IGZvciB0aGUgZ2l2ZW4gcHJvdG9jb2xcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcXVpcmVkKHBvcnQsIHByb3RvY29sKSB7XG4gIHByb3RvY29sID0gcHJvdG9jb2wuc3BsaXQoJzonKVswXTtcbiAgcG9ydCA9ICtwb3J0O1xuXG4gIGlmICghcG9ydCkgcmV0dXJuIGZhbHNlO1xuXG4gIHN3aXRjaCAocHJvdG9jb2wpIHtcbiAgICBjYXNlICdodHRwJzpcbiAgICBjYXNlICd3cyc6XG4gICAgcmV0dXJuIHBvcnQgIT09IDgwO1xuXG4gICAgY2FzZSAnaHR0cHMnOlxuICAgIGNhc2UgJ3dzcyc6XG4gICAgcmV0dXJuIHBvcnQgIT09IDQ0MztcblxuICAgIGNhc2UgJ2Z0cCc6XG4gICAgcmV0dXJuIHBvcnQgIT09IDIxO1xuXG4gICAgY2FzZSAnZ29waGVyJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gNzA7XG5cbiAgICBjYXNlICdmaWxlJzpcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gcG9ydCAhPT0gMDtcbn07XG5cblxuLyoqKi8gfSksXG4vKiAxNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHtcblxudmFyIHNsYXNoZXMgPSAvXltBLVphLXpdW0EtWmEtejAtOSstLl0qOlxcL1xcLy87XG5cbi8qKlxuICogVGhlc2UgcHJvcGVydGllcyBzaG91bGQgbm90IGJlIGNvcGllZCBvciBpbmhlcml0ZWQgZnJvbS4gVGhpcyBpcyBvbmx5IG5lZWRlZFxuICogZm9yIGFsbCBub24gYmxvYiBVUkwncyBhcyBhIGJsb2IgVVJMIGRvZXMgbm90IGluY2x1ZGUgYSBoYXNoLCBvbmx5IHRoZVxuICogb3JpZ2luLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgaWdub3JlID0geyBoYXNoOiAxLCBxdWVyeTogMSB9XG4gICwgVVJMO1xuXG4vKipcbiAqIFRoZSBsb2NhdGlvbiBvYmplY3QgZGlmZmVycyB3aGVuIHlvdXIgY29kZSBpcyBsb2FkZWQgdGhyb3VnaCBhIG5vcm1hbCBwYWdlLFxuICogV29ya2VyIG9yIHRocm91Z2ggYSB3b3JrZXIgdXNpbmcgYSBibG9iLiBBbmQgd2l0aCB0aGUgYmxvYmJsZSBiZWdpbnMgdGhlXG4gKiB0cm91YmxlIGFzIHRoZSBsb2NhdGlvbiBvYmplY3Qgd2lsbCBjb250YWluIHRoZSBVUkwgb2YgdGhlIGJsb2IsIG5vdCB0aGVcbiAqIGxvY2F0aW9uIG9mIHRoZSBwYWdlIHdoZXJlIG91ciBjb2RlIGlzIGxvYWRlZCBpbi4gVGhlIGFjdHVhbCBvcmlnaW4gaXNcbiAqIGVuY29kZWQgaW4gdGhlIGBwYXRobmFtZWAgc28gd2UgY2FuIHRoYW5rZnVsbHkgZ2VuZXJhdGUgYSBnb29kIFwiZGVmYXVsdFwiXG4gKiBsb2NhdGlvbiBmcm9tIGl0IHNvIHdlIGNhbiBnZW5lcmF0ZSBwcm9wZXIgcmVsYXRpdmUgVVJMJ3MgYWdhaW4uXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBsb2MgT3B0aW9uYWwgZGVmYXVsdCBsb2NhdGlvbiBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBsb2xjYXRpb24gb2JqZWN0LlxuICogQGFwaSBwdWJsaWNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsb2xjYXRpb24obG9jKSB7XG4gIGxvYyA9IGxvYyB8fCBnbG9iYWwubG9jYXRpb24gfHwge307XG4gIFVSTCA9IFVSTCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG4gIHZhciBmaW5hbGRlc3RpbmF0aW9uID0ge31cbiAgICAsIHR5cGUgPSB0eXBlb2YgbG9jXG4gICAgLCBrZXk7XG5cbiAgaWYgKCdibG9iOicgPT09IGxvYy5wcm90b2NvbCkge1xuICAgIGZpbmFsZGVzdGluYXRpb24gPSBuZXcgVVJMKHVuZXNjYXBlKGxvYy5wYXRobmFtZSksIHt9KTtcbiAgfSBlbHNlIGlmICgnc3RyaW5nJyA9PT0gdHlwZSkge1xuICAgIGZpbmFsZGVzdGluYXRpb24gPSBuZXcgVVJMKGxvYywge30pO1xuICAgIGZvciAoa2V5IGluIGlnbm9yZSkgZGVsZXRlIGZpbmFsZGVzdGluYXRpb25ba2V5XTtcbiAgfSBlbHNlIGlmICgnb2JqZWN0JyA9PT0gdHlwZSkge1xuICAgIGZvciAoa2V5IGluIGxvYykge1xuICAgICAgaWYgKGtleSBpbiBpZ25vcmUpIGNvbnRpbnVlO1xuICAgICAgZmluYWxkZXN0aW5hdGlvbltrZXldID0gbG9jW2tleV07XG4gICAgfVxuXG4gICAgaWYgKGZpbmFsZGVzdGluYXRpb24uc2xhc2hlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmaW5hbGRlc3RpbmF0aW9uLnNsYXNoZXMgPSBzbGFzaGVzLnRlc3QobG9jLmhyZWYpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmaW5hbGRlc3RpbmF0aW9uO1xufTtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMTcpKSlcblxuLyoqKi8gfSksXG4vKiAxNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgbWFwID0ge1xuXHRcIi4vaGlzdG9yeVwiOiAxLFxuXHRcIi4vaGlzdG9yeS5qc1wiOiAxLFxuXHRcIi4vaG90dGVzdFwiOiAyLFxuXHRcIi4vaG90dGVzdC5qc1wiOiAyLFxuXHRcIi4vc2V0dGluZ1wiOiAzLFxuXHRcIi4vc2V0dGluZy5qc1wiOiAzLFxuXHRcIi4vc3RhdGlzdGljc1wiOiA0LFxuXHRcIi4vc3RhdGlzdGljcy5qc1wiOiA0XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpKTtcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdHZhciBpZCA9IG1hcFtyZXFdO1xuXHRpZighKGlkICsgMSkpIC8vIGNoZWNrIGZvciBudW1iZXJcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcblx0cmV0dXJuIGlkO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAxODtcblxuXG4vKioqLyB9KSxcbi8qIDE5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfdXBUbyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfdXBUbzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91cFRvKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZG9jdW1lbnQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2ludGVyYWN0aXZlJyA9PT0gZG9jdW1lbnQucmVhZHlTdGF0ZSkge1xuICAgIHZhciBkb20gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZG9tID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2W3JvbGU9XCJzZWFyY2hcIl0nKTtcblxuICAgICAgaWYgKCFkb20pIHtcbiAgICAgICAgZG9tID0gKDAsIF91cFRvMi5kZWZhdWx0KShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmb3JtW3JvbGU9XCJzZWFyY2hcIl0nKSwgJ2RpdicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKDAsIF91cFRvMi5kZWZhdWx0KShkb20sICdkaXYnKTtcbiAgICB9KCk7XG5cbiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpKGRvbSk7XG4gICAgX193ZWJwYWNrX3JlcXVpcmVfXyg5KShkb20pO1xuICAgIF9fd2VicGFja19yZXF1aXJlX18oNikoKTtcbiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpKCk7XG5cbiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKSgpO1xuICAgIF9fd2VicGFja19yZXF1aXJlX18oMTApKCk7XG4gICAgX193ZWJwYWNrX3JlcXVpcmVfXygxMikoKTtcbiAgfVxufTtcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBjb250ZW50LXNjcmlwdHMuanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxOSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgNDI1ZGQyNTZlZWUwMjNhZWY1ZDEiLCIvKipcbiAqIEZpbmQgZmlyc3QgYW5jZXN0b3Igb2YgZWwgd2l0aCB0YWdOYW1lIG9yIHVuZGVmaW5lZCBpZiBub3QgZm91bmQuXG4gKlxuICogQHBhcmFtIGVsXG4gKiBAcGFyYW0gdGFnTmFtZVxuICogQHJldHVybnMgeyp9XG4gKlxuICogQHJlZmVyZW5jZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS82ODU3MTE2XG4gKi9cbmV4cG9ydCBkZWZhdWx0IChlbCwgdGFnTmFtZSkgPT4ge1xuICB0YWdOYW1lID0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpXG5cbiAgd2hpbGUgKGVsICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICBlbCA9IGVsLnBhcmVudE5vZGVcblxuICAgIGlmIChlbC50YWdOYW1lICYmIGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gdGFnTmFtZSkge1xuICAgICAgcmV0dXJuIGVsXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy91cC10by5qcyIsIm1vZHVsZS5leHBvcnRzID0gKGRvbSkgPT4ge1xuICAvL1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRlbnQtc2NyaXB0cy9tb25pdG9ycy9tb2RhbHMvaGlzdG9yeS5qcyIsIm1vZHVsZS5leHBvcnRzID0gKGRvbSkgPT4ge1xuICAvL1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRlbnQtc2NyaXB0cy9tb25pdG9ycy9tb2RhbHMvaG90dGVzdC5qcyIsImltcG9ydCBib29sZWFuIGZyb20gJ2Jvb2xlYW4nXG5pbXBvcnQgdXBUbyBmcm9tICcuLi8uLi8uLi91dGlscy91cC10bydcblxubW9kdWxlLmV4cG9ydHMgPSAoZG9tKSA9PiB7XG4gIGNvbnN0IHRhYmxlID0gW1xuICAgIHsgdGl0bGU6ICfnsr7pgbjli5XmhYsnLCBkZXNjcmlwdGlvbjogJ+aWvOWLleaFi+aZguWgseS4iuW1jOWFpeaIkeWAkeeyvumBuOeahOeGsemWgOWLleaFiycsIGtleTogJ2ZlYXR1cmVkLWZlZWQnIH0sXG4gICAgeyB0aXRsZTogJ+enu+mZpOW7o+WRiicsIGRlc2NyaXB0aW9uOiAn5pa85YuV5oWL5pmC5aCx5LiK56e76Zmk54K66LSK5Yqp55qE5YuV5oWLJywga2V5OiAncmVtb3ZlLWFkJyB9LFxuICAgIHsgdGl0bGU6ICflkIzmraXmkJzlsIsnLCBkZXNjcmlwdGlvbjogJ+aWvOiHieabuOaQnOWwi+aZgu+8jOS4gOS4puaWvOaIkeWAkeWwiOWxrOizh+aWmeW6q+S4reaQnOWwiycsIGtleTogJ3N5bmMtc2VhcmNoJyB9XG4gIF1cblxuICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoJ3NldHRpbmcnLCAocmVzdWx0KSA9PiB7XG4gICAgY29uc3Qgc2V0dGluZyA9IHJlc3VsdC5zZXR0aW5nIHx8IHt9XG5cbiAgICBkb20uaW5uZXJIVE1MID0gdGFibGUucmVkdWNlKChodG1sLCBpdGVtKSA9PiB7XG4gICAgICByZXR1cm4gaHRtbCArIGBcbjxkaXYgY2xhc3M9XCJzZXR0aW5nLXNlY3Rpb25cIj5cbiAgPGRpdiBjbGFzcz1cInRpdGxlXCI+XG4gICAgPGI+JHtpdGVtLnRpdGxlfTwvYj5cbiAgPC9kaXY+XG4gIFxuICA8ZGl2IGNsYXNzPVwiZGVzY3JpcHRpb25cIj5cbiAgICA8c3Bhbj4ke2l0ZW0uZGVzY3JpcHRpb259PC9zcGFuPlxuICA8L2Rpdj5cbiAgXG4gIDxkaXYgY2xhc3M9XCJvcGVyYXRpb25cIj5cbiAgICA8c3BhbiBjbGFzcz1cInN1Y2Nlc3MtaWNvblwiPlxuICAgICAgPGkgY2xhc3M9XCJmYSBmYS1jaGVja1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICA8L3NwYW4+XG4gICAgXG4gICAgPHNlbGVjdCBpZD1cIiR7aXRlbS5rZXl9XCI+XG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCIwXCI+T2ZmPC9vcHRpb24+XG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCIxXCIgJHtib29sZWFuKHNldHRpbmdbaXRlbS5rZXldKSA/ICdzZWxlY3RlZCcgOiAnJ30+T248L29wdGlvbj5cbiAgICA8L3NlbGVjdD5cbiAgPC9kaXY+XG48L2Rpdj5gXG4gICAgfSwgJycpXG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY3VzdG9tLW1vZGFsIC5ib3ggLmNvbnRlbnQgLnNldHRpbmctc2VjdGlvbiAub3BlcmF0aW9uIHNlbGVjdCcpLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGUgPT4ge1xuICAgICAgICBzZXR0aW5nW2UudGFyZ2V0LmlkXSA9IGJvb2xlYW4oZS50YXJnZXQudmFsdWUpXG5cbiAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgc2V0dGluZyB9LCAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgbiA9IHVwVG8oZS50YXJnZXQsICdkaXYnKS5xdWVyeVNlbGVjdG9yKCdzcGFuJylcblxuICAgICAgICAgIG4uY2xhc3NOYW1lID0gbi5jbGFzc05hbWUucmVwbGFjZSgvID9hbmkvZywgJycpXG5cbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgbi5jbGFzc05hbWUgKz0gJyBhbmknIH0sIDEpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29udGVudC1zY3JpcHRzL21vbml0b3JzL21vZGFscy9zZXR0aW5nLmpzIiwibW9kdWxlLmV4cG9ydHMgPSAoZG9tKSA9PiB7XG4gIC8vXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29udGVudC1zY3JpcHRzL21vbml0b3JzL21vZGFscy9zdGF0aXN0aWNzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVxdWlyZWQgPSByZXF1aXJlKCdyZXF1aXJlcy1wb3J0JylcbiAgLCBsb2xjYXRpb24gPSByZXF1aXJlKCcuL2xvbGNhdGlvbicpXG4gICwgcXMgPSByZXF1aXJlKCdxdWVyeXN0cmluZ2lmeScpXG4gICwgcHJvdG9jb2xyZSA9IC9eKFthLXpdW2EtejAtOS4rLV0qOik/KFxcL1xcLyk/KFtcXFNcXHNdKikvaTtcblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIHBhcnNlIHJ1bGVzIGZvciB0aGUgVVJMIHBhcnNlciwgaXQgaW5mb3JtcyB0aGUgcGFyc2VyXG4gKiBhYm91dDpcbiAqXG4gKiAwLiBUaGUgY2hhciBpdCBOZWVkcyB0byBwYXJzZSwgaWYgaXQncyBhIHN0cmluZyBpdCBzaG91bGQgYmUgZG9uZSB1c2luZ1xuICogICAgaW5kZXhPZiwgUmVnRXhwIHVzaW5nIGV4ZWMgYW5kIE5hTiBtZWFucyBzZXQgYXMgY3VycmVudCB2YWx1ZS5cbiAqIDEuIFRoZSBwcm9wZXJ0eSB3ZSBzaG91bGQgc2V0IHdoZW4gcGFyc2luZyB0aGlzIHZhbHVlLlxuICogMi4gSW5kaWNhdGlvbiBpZiBpdCdzIGJhY2t3YXJkcyBvciBmb3J3YXJkIHBhcnNpbmcsIHdoZW4gc2V0IGFzIG51bWJlciBpdCdzXG4gKiAgICB0aGUgdmFsdWUgb2YgZXh0cmEgY2hhcnMgdGhhdCBzaG91bGQgYmUgc3BsaXQgb2ZmLlxuICogMy4gSW5oZXJpdCBmcm9tIGxvY2F0aW9uIGlmIG5vbiBleGlzdGluZyBpbiB0aGUgcGFyc2VyLlxuICogNC4gYHRvTG93ZXJDYXNlYCB0aGUgcmVzdWx0aW5nIHZhbHVlLlxuICovXG52YXIgcnVsZXMgPSBbXG4gIFsnIycsICdoYXNoJ10sICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBiYWNrLlxuICBbJz8nLCAncXVlcnknXSwgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgZnJvbSB0aGUgYmFjay5cbiAgWycvJywgJ3BhdGhuYW1lJ10sICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGZyb20gdGhlIGJhY2suXG4gIFsnQCcsICdhdXRoJywgMV0sICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBmcm9udC5cbiAgW05hTiwgJ2hvc3QnLCB1bmRlZmluZWQsIDEsIDFdLCAgICAgICAvLyBTZXQgbGVmdCBvdmVyIHZhbHVlLlxuICBbLzooXFxkKykkLywgJ3BvcnQnLCB1bmRlZmluZWQsIDFdLCAgICAvLyBSZWdFeHAgdGhlIGJhY2suXG4gIFtOYU4sICdob3N0bmFtZScsIHVuZGVmaW5lZCwgMSwgMV0gICAgLy8gU2V0IGxlZnQgb3Zlci5cbl07XG5cbi8qKlxuICogQHR5cGVkZWYgUHJvdG9jb2xFeHRyYWN0XG4gKiBAdHlwZSBPYmplY3RcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBwcm90b2NvbCBQcm90b2NvbCBtYXRjaGVkIGluIHRoZSBVUkwsIGluIGxvd2VyY2FzZS5cbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gc2xhc2hlcyBgdHJ1ZWAgaWYgcHJvdG9jb2wgaXMgZm9sbG93ZWQgYnkgXCIvL1wiLCBlbHNlIGBmYWxzZWAuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gcmVzdCBSZXN0IG9mIHRoZSBVUkwgdGhhdCBpcyBub3QgcGFydCBvZiB0aGUgcHJvdG9jb2wuXG4gKi9cblxuLyoqXG4gKiBFeHRyYWN0IHByb3RvY29sIGluZm9ybWF0aW9uIGZyb20gYSBVUkwgd2l0aC93aXRob3V0IGRvdWJsZSBzbGFzaCAoXCIvL1wiKS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzcyBVUkwgd2Ugd2FudCB0byBleHRyYWN0IGZyb20uXG4gKiBAcmV0dXJuIHtQcm90b2NvbEV4dHJhY3R9IEV4dHJhY3RlZCBpbmZvcm1hdGlvbi5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBleHRyYWN0UHJvdG9jb2woYWRkcmVzcykge1xuICB2YXIgbWF0Y2ggPSBwcm90b2NvbHJlLmV4ZWMoYWRkcmVzcyk7XG5cbiAgcmV0dXJuIHtcbiAgICBwcm90b2NvbDogbWF0Y2hbMV0gPyBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpIDogJycsXG4gICAgc2xhc2hlczogISFtYXRjaFsyXSxcbiAgICByZXN0OiBtYXRjaFszXVxuICB9O1xufVxuXG4vKipcbiAqIFJlc29sdmUgYSByZWxhdGl2ZSBVUkwgcGF0aG5hbWUgYWdhaW5zdCBhIGJhc2UgVVJMIHBhdGhuYW1lLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByZWxhdGl2ZSBQYXRobmFtZSBvZiB0aGUgcmVsYXRpdmUgVVJMLlxuICogQHBhcmFtIHtTdHJpbmd9IGJhc2UgUGF0aG5hbWUgb2YgdGhlIGJhc2UgVVJMLlxuICogQHJldHVybiB7U3RyaW5nfSBSZXNvbHZlZCBwYXRobmFtZS5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZXNvbHZlKHJlbGF0aXZlLCBiYXNlKSB7XG4gIHZhciBwYXRoID0gKGJhc2UgfHwgJy8nKS5zcGxpdCgnLycpLnNsaWNlKDAsIC0xKS5jb25jYXQocmVsYXRpdmUuc3BsaXQoJy8nKSlcbiAgICAsIGkgPSBwYXRoLmxlbmd0aFxuICAgICwgbGFzdCA9IHBhdGhbaSAtIDFdXG4gICAgLCB1bnNoaWZ0ID0gZmFsc2VcbiAgICAsIHVwID0gMDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKHBhdGhbaV0gPT09ICcuJykge1xuICAgICAgcGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChwYXRoW2ldID09PSAnLi4nKSB7XG4gICAgICBwYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgaWYgKGkgPT09IDApIHVuc2hpZnQgPSB0cnVlO1xuICAgICAgcGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICh1bnNoaWZ0KSBwYXRoLnVuc2hpZnQoJycpO1xuICBpZiAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHBhdGgucHVzaCgnJyk7XG5cbiAgcmV0dXJuIHBhdGguam9pbignLycpO1xufVxuXG4vKipcbiAqIFRoZSBhY3R1YWwgVVJMIGluc3RhbmNlLiBJbnN0ZWFkIG9mIHJldHVybmluZyBhbiBvYmplY3Qgd2UndmUgb3B0ZWQtaW4gdG9cbiAqIGNyZWF0ZSBhbiBhY3R1YWwgY29uc3RydWN0b3IgYXMgaXQncyBtdWNoIG1vcmUgbWVtb3J5IGVmZmljaWVudCBhbmRcbiAqIGZhc3RlciBhbmQgaXQgcGxlYXNlcyBteSBPQ0QuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzcyBVUkwgd2Ugd2FudCB0byBwYXJzZS5cbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gbG9jYXRpb24gTG9jYXRpb24gZGVmYXVsdHMgZm9yIHJlbGF0aXZlIHBhdGhzLlxuICogQHBhcmFtIHtCb29sZWFufEZ1bmN0aW9ufSBwYXJzZXIgUGFyc2VyIGZvciB0aGUgcXVlcnkgc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gVVJMKGFkZHJlc3MsIGxvY2F0aW9uLCBwYXJzZXIpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFVSTCkpIHtcbiAgICByZXR1cm4gbmV3IFVSTChhZGRyZXNzLCBsb2NhdGlvbiwgcGFyc2VyKTtcbiAgfVxuXG4gIHZhciByZWxhdGl2ZSwgZXh0cmFjdGVkLCBwYXJzZSwgaW5zdHJ1Y3Rpb24sIGluZGV4LCBrZXlcbiAgICAsIGluc3RydWN0aW9ucyA9IHJ1bGVzLnNsaWNlKClcbiAgICAsIHR5cGUgPSB0eXBlb2YgbG9jYXRpb25cbiAgICAsIHVybCA9IHRoaXNcbiAgICAsIGkgPSAwO1xuXG4gIC8vXG4gIC8vIFRoZSBmb2xsb3dpbmcgaWYgc3RhdGVtZW50cyBhbGxvd3MgdGhpcyBtb2R1bGUgdHdvIGhhdmUgY29tcGF0aWJpbGl0eSB3aXRoXG4gIC8vIDIgZGlmZmVyZW50IEFQSTpcbiAgLy9cbiAgLy8gMS4gTm9kZS5qcydzIGB1cmwucGFyc2VgIGFwaSB3aGljaCBhY2NlcHRzIGEgVVJMLCBib29sZWFuIGFzIGFyZ3VtZW50c1xuICAvLyAgICB3aGVyZSB0aGUgYm9vbGVhbiBpbmRpY2F0ZXMgdGhhdCB0aGUgcXVlcnkgc3RyaW5nIHNob3VsZCBhbHNvIGJlIHBhcnNlZC5cbiAgLy9cbiAgLy8gMi4gVGhlIGBVUkxgIGludGVyZmFjZSBvZiB0aGUgYnJvd3NlciB3aGljaCBhY2NlcHRzIGEgVVJMLCBvYmplY3QgYXNcbiAgLy8gICAgYXJndW1lbnRzLiBUaGUgc3VwcGxpZWQgb2JqZWN0IHdpbGwgYmUgdXNlZCBhcyBkZWZhdWx0IHZhbHVlcyAvIGZhbGwtYmFja1xuICAvLyAgICBmb3IgcmVsYXRpdmUgcGF0aHMuXG4gIC8vXG4gIGlmICgnb2JqZWN0JyAhPT0gdHlwZSAmJiAnc3RyaW5nJyAhPT0gdHlwZSkge1xuICAgIHBhcnNlciA9IGxvY2F0aW9uO1xuICAgIGxvY2F0aW9uID0gbnVsbDtcbiAgfVxuXG4gIGlmIChwYXJzZXIgJiYgJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIHBhcnNlcikgcGFyc2VyID0gcXMucGFyc2U7XG5cbiAgbG9jYXRpb24gPSBsb2xjYXRpb24obG9jYXRpb24pO1xuXG4gIC8vXG4gIC8vIEV4dHJhY3QgcHJvdG9jb2wgaW5mb3JtYXRpb24gYmVmb3JlIHJ1bm5pbmcgdGhlIGluc3RydWN0aW9ucy5cbiAgLy9cbiAgZXh0cmFjdGVkID0gZXh0cmFjdFByb3RvY29sKGFkZHJlc3MgfHwgJycpO1xuICByZWxhdGl2ZSA9ICFleHRyYWN0ZWQucHJvdG9jb2wgJiYgIWV4dHJhY3RlZC5zbGFzaGVzO1xuICB1cmwuc2xhc2hlcyA9IGV4dHJhY3RlZC5zbGFzaGVzIHx8IHJlbGF0aXZlICYmIGxvY2F0aW9uLnNsYXNoZXM7XG4gIHVybC5wcm90b2NvbCA9IGV4dHJhY3RlZC5wcm90b2NvbCB8fCBsb2NhdGlvbi5wcm90b2NvbCB8fCAnJztcbiAgYWRkcmVzcyA9IGV4dHJhY3RlZC5yZXN0O1xuXG4gIC8vXG4gIC8vIFdoZW4gdGhlIGF1dGhvcml0eSBjb21wb25lbnQgaXMgYWJzZW50IHRoZSBVUkwgc3RhcnRzIHdpdGggYSBwYXRoXG4gIC8vIGNvbXBvbmVudC5cbiAgLy9cbiAgaWYgKCFleHRyYWN0ZWQuc2xhc2hlcykgaW5zdHJ1Y3Rpb25zWzJdID0gWy8oLiopLywgJ3BhdGhuYW1lJ107XG5cbiAgZm9yICg7IGkgPCBpbnN0cnVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpbnN0cnVjdGlvbiA9IGluc3RydWN0aW9uc1tpXTtcbiAgICBwYXJzZSA9IGluc3RydWN0aW9uWzBdO1xuICAgIGtleSA9IGluc3RydWN0aW9uWzFdO1xuXG4gICAgaWYgKHBhcnNlICE9PSBwYXJzZSkge1xuICAgICAgdXJsW2tleV0gPSBhZGRyZXNzO1xuICAgIH0gZWxzZSBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBwYXJzZSkge1xuICAgICAgaWYgKH4oaW5kZXggPSBhZGRyZXNzLmluZGV4T2YocGFyc2UpKSkge1xuICAgICAgICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiBpbnN0cnVjdGlvblsyXSkge1xuICAgICAgICAgIHVybFtrZXldID0gYWRkcmVzcy5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgICAgYWRkcmVzcyA9IGFkZHJlc3Muc2xpY2UoaW5kZXggKyBpbnN0cnVjdGlvblsyXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXJsW2tleV0gPSBhZGRyZXNzLnNsaWNlKGluZGV4KTtcbiAgICAgICAgICBhZGRyZXNzID0gYWRkcmVzcy5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKChpbmRleCA9IHBhcnNlLmV4ZWMoYWRkcmVzcykpKSB7XG4gICAgICB1cmxba2V5XSA9IGluZGV4WzFdO1xuICAgICAgYWRkcmVzcyA9IGFkZHJlc3Muc2xpY2UoMCwgaW5kZXguaW5kZXgpO1xuICAgIH1cblxuICAgIHVybFtrZXldID0gdXJsW2tleV0gfHwgKFxuICAgICAgcmVsYXRpdmUgJiYgaW5zdHJ1Y3Rpb25bM10gPyBsb2NhdGlvbltrZXldIHx8ICcnIDogJydcbiAgICApO1xuXG4gICAgLy9cbiAgICAvLyBIb3N0bmFtZSwgaG9zdCBhbmQgcHJvdG9jb2wgc2hvdWxkIGJlIGxvd2VyY2FzZWQgc28gdGhleSBjYW4gYmUgdXNlZCB0b1xuICAgIC8vIGNyZWF0ZSBhIHByb3BlciBgb3JpZ2luYC5cbiAgICAvL1xuICAgIGlmIChpbnN0cnVjdGlvbls0XSkgdXJsW2tleV0gPSB1cmxba2V5XS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgLy9cbiAgLy8gQWxzbyBwYXJzZSB0aGUgc3VwcGxpZWQgcXVlcnkgc3RyaW5nIGluIHRvIGFuIG9iamVjdC4gSWYgd2UncmUgc3VwcGxpZWRcbiAgLy8gd2l0aCBhIGN1c3RvbSBwYXJzZXIgYXMgZnVuY3Rpb24gdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBidWlsZC1pblxuICAvLyBwYXJzZXIuXG4gIC8vXG4gIGlmIChwYXJzZXIpIHVybC5xdWVyeSA9IHBhcnNlcih1cmwucXVlcnkpO1xuXG4gIC8vXG4gIC8vIElmIHRoZSBVUkwgaXMgcmVsYXRpdmUsIHJlc29sdmUgdGhlIHBhdGhuYW1lIGFnYWluc3QgdGhlIGJhc2UgVVJMLlxuICAvL1xuICBpZiAoXG4gICAgICByZWxhdGl2ZVxuICAgICYmIGxvY2F0aW9uLnNsYXNoZXNcbiAgICAmJiB1cmwucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLydcbiAgICAmJiAodXJsLnBhdGhuYW1lICE9PSAnJyB8fCBsb2NhdGlvbi5wYXRobmFtZSAhPT0gJycpXG4gICkge1xuICAgIHVybC5wYXRobmFtZSA9IHJlc29sdmUodXJsLnBhdGhuYW1lLCBsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH1cblxuICAvL1xuICAvLyBXZSBzaG91bGQgbm90IGFkZCBwb3J0IG51bWJlcnMgaWYgdGhleSBhcmUgYWxyZWFkeSB0aGUgZGVmYXVsdCBwb3J0IG51bWJlclxuICAvLyBmb3IgYSBnaXZlbiBwcm90b2NvbC4gQXMgdGhlIGhvc3QgYWxzbyBjb250YWlucyB0aGUgcG9ydCBudW1iZXIgd2UncmUgZ29pbmdcbiAgLy8gb3ZlcnJpZGUgaXQgd2l0aCB0aGUgaG9zdG5hbWUgd2hpY2ggY29udGFpbnMgbm8gcG9ydCBudW1iZXIuXG4gIC8vXG4gIGlmICghcmVxdWlyZWQodXJsLnBvcnQsIHVybC5wcm90b2NvbCkpIHtcbiAgICB1cmwuaG9zdCA9IHVybC5ob3N0bmFtZTtcbiAgICB1cmwucG9ydCA9ICcnO1xuICB9XG5cbiAgLy9cbiAgLy8gUGFyc2UgZG93biB0aGUgYGF1dGhgIGZvciB0aGUgdXNlcm5hbWUgYW5kIHBhc3N3b3JkLlxuICAvL1xuICB1cmwudXNlcm5hbWUgPSB1cmwucGFzc3dvcmQgPSAnJztcbiAgaWYgKHVybC5hdXRoKSB7XG4gICAgaW5zdHJ1Y3Rpb24gPSB1cmwuYXV0aC5zcGxpdCgnOicpO1xuICAgIHVybC51c2VybmFtZSA9IGluc3RydWN0aW9uWzBdIHx8ICcnO1xuICAgIHVybC5wYXNzd29yZCA9IGluc3RydWN0aW9uWzFdIHx8ICcnO1xuICB9XG5cbiAgdXJsLm9yaWdpbiA9IHVybC5wcm90b2NvbCAmJiB1cmwuaG9zdCAmJiB1cmwucHJvdG9jb2wgIT09ICdmaWxlOidcbiAgICA/IHVybC5wcm90b2NvbCArJy8vJysgdXJsLmhvc3RcbiAgICA6ICdudWxsJztcblxuICAvL1xuICAvLyBUaGUgaHJlZiBpcyBqdXN0IHRoZSBjb21waWxlZCByZXN1bHQuXG4gIC8vXG4gIHVybC5ocmVmID0gdXJsLnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICogVGhpcyBpcyBjb252ZW5pZW5jZSBtZXRob2QgZm9yIGNoYW5naW5nIHByb3BlcnRpZXMgaW4gdGhlIFVSTCBpbnN0YW5jZSB0b1xuICogaW5zdXJlIHRoYXQgdGhleSBhbGwgcHJvcGFnYXRlIGNvcnJlY3RseS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFydCAgICAgICAgICBQcm9wZXJ0eSB3ZSBuZWVkIHRvIGFkanVzdC5cbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlICAgICAgICAgIFRoZSBuZXdseSBhc3NpZ25lZCB2YWx1ZS5cbiAqIEBwYXJhbSB7Qm9vbGVhbnxGdW5jdGlvbn0gZm4gIFdoZW4gc2V0dGluZyB0aGUgcXVlcnksIGl0IHdpbGwgYmUgdGhlIGZ1bmN0aW9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIHRvIHBhcnNlIHRoZSBxdWVyeS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdoZW4gc2V0dGluZyB0aGUgcHJvdG9jb2wsIGRvdWJsZSBzbGFzaCB3aWxsIGJlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkIGZyb20gdGhlIGZpbmFsIHVybCBpZiBpdCBpcyB0cnVlLlxuICogQHJldHVybnMge1VSTH1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHNldChwYXJ0LCB2YWx1ZSwgZm4pIHtcbiAgdmFyIHVybCA9IHRoaXM7XG5cbiAgc3dpdGNoIChwYXJ0KSB7XG4gICAgY2FzZSAncXVlcnknOlxuICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdmFsdWUgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlID0gKGZuIHx8IHFzLnBhcnNlKSh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwb3J0JzpcbiAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuXG4gICAgICBpZiAoIXJlcXVpcmVkKHZhbHVlLCB1cmwucHJvdG9jb2wpKSB7XG4gICAgICAgIHVybC5ob3N0ID0gdXJsLmhvc3RuYW1lO1xuICAgICAgICB1cmxbcGFydF0gPSAnJztcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgdXJsLmhvc3QgPSB1cmwuaG9zdG5hbWUgKyc6JysgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaG9zdG5hbWUnOlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG5cbiAgICAgIGlmICh1cmwucG9ydCkgdmFsdWUgKz0gJzonKyB1cmwucG9ydDtcbiAgICAgIHVybC5ob3N0ID0gdmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2hvc3QnOlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG5cbiAgICAgIGlmICgvOlxcZCskLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnNwbGl0KCc6Jyk7XG4gICAgICAgIHVybC5wb3J0ID0gdmFsdWUucG9wKCk7XG4gICAgICAgIHVybC5ob3N0bmFtZSA9IHZhbHVlLmpvaW4oJzonKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybC5ob3N0bmFtZSA9IHZhbHVlO1xuICAgICAgICB1cmwucG9ydCA9ICcnO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3Byb3RvY29sJzpcbiAgICAgIHVybC5wcm90b2NvbCA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICB1cmwuc2xhc2hlcyA9ICFmbjtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncGF0aG5hbWUnOlxuICAgICAgdXJsLnBhdGhuYW1lID0gdmFsdWUubGVuZ3RoICYmIHZhbHVlLmNoYXJBdCgwKSAhPT0gJy8nID8gJy8nICsgdmFsdWUgOiB2YWx1ZTtcblxuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGlucyA9IHJ1bGVzW2ldO1xuXG4gICAgaWYgKGluc1s0XSkgdXJsW2luc1sxXV0gPSB1cmxbaW5zWzFdXS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgdXJsLm9yaWdpbiA9IHVybC5wcm90b2NvbCAmJiB1cmwuaG9zdCAmJiB1cmwucHJvdG9jb2wgIT09ICdmaWxlOidcbiAgICA/IHVybC5wcm90b2NvbCArJy8vJysgdXJsLmhvc3RcbiAgICA6ICdudWxsJztcblxuICB1cmwuaHJlZiA9IHVybC50b1N0cmluZygpO1xuXG4gIHJldHVybiB1cmw7XG59O1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgcHJvcGVydGllcyBiYWNrIGluIHRvIGEgdmFsaWQgYW5kIGZ1bGwgVVJMIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmdpZnkgT3B0aW9uYWwgcXVlcnkgc3RyaW5naWZ5IGZ1bmN0aW9uLlxuICogQHJldHVybnMge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHN0cmluZ2lmeSkge1xuICBpZiAoIXN0cmluZ2lmeSB8fCAnZnVuY3Rpb24nICE9PSB0eXBlb2Ygc3RyaW5naWZ5KSBzdHJpbmdpZnkgPSBxcy5zdHJpbmdpZnk7XG5cbiAgdmFyIHF1ZXJ5XG4gICAgLCB1cmwgPSB0aGlzXG4gICAgLCBwcm90b2NvbCA9IHVybC5wcm90b2NvbDtcblxuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuY2hhckF0KHByb3RvY29sLmxlbmd0aCAtIDEpICE9PSAnOicpIHByb3RvY29sICs9ICc6JztcblxuICB2YXIgcmVzdWx0ID0gcHJvdG9jb2wgKyAodXJsLnNsYXNoZXMgPyAnLy8nIDogJycpO1xuXG4gIGlmICh1cmwudXNlcm5hbWUpIHtcbiAgICByZXN1bHQgKz0gdXJsLnVzZXJuYW1lO1xuICAgIGlmICh1cmwucGFzc3dvcmQpIHJlc3VsdCArPSAnOicrIHVybC5wYXNzd29yZDtcbiAgICByZXN1bHQgKz0gJ0AnO1xuICB9XG5cbiAgcmVzdWx0ICs9IHVybC5ob3N0ICsgdXJsLnBhdGhuYW1lO1xuXG4gIHF1ZXJ5ID0gJ29iamVjdCcgPT09IHR5cGVvZiB1cmwucXVlcnkgPyBzdHJpbmdpZnkodXJsLnF1ZXJ5KSA6IHVybC5xdWVyeTtcbiAgaWYgKHF1ZXJ5KSByZXN1bHQgKz0gJz8nICE9PSBxdWVyeS5jaGFyQXQoMCkgPyAnPycrIHF1ZXJ5IDogcXVlcnk7XG5cbiAgaWYgKHVybC5oYXNoKSByZXN1bHQgKz0gdXJsLmhhc2g7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuVVJMLnByb3RvdHlwZSA9IHsgc2V0OiBzZXQsIHRvU3RyaW5nOiB0b1N0cmluZyB9O1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBVUkwgcGFyc2VyIGFuZCBzb21lIGFkZGl0aW9uYWwgcHJvcGVydGllcyB0aGF0IG1pZ2h0IGJlIHVzZWZ1bCBmb3Jcbi8vIG90aGVycyBvciB0ZXN0aW5nLlxuLy9cblVSTC5leHRyYWN0UHJvdG9jb2wgPSBleHRyYWN0UHJvdG9jb2w7XG5VUkwubG9jYXRpb24gPSBsb2xjYXRpb247XG5VUkwucXMgPSBxcztcblxubW9kdWxlLmV4cG9ydHMgPSBVUkw7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdXJsLXBhcnNlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB1cFRvIGZyb20gJy4uLy4uL3V0aWxzL3VwLXRvJ1xuXG4vKipcbiAqIENyZWF0ZSBhIGZvbnQgYXdlc29tZSBpY29uIG5vZGUuXG4gKlxuICogQHBhcmFtIGljb25cbiAqIEBwYXJhbSBuYW1lXG4gKlxuICogQHJldHVybnMgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGljb25Ob2RlIChpY29uLCBuYW1lKSB7XG4gIHJldHVybiBgPGkgY2xhc3M9XCJmYSBmYS1mdyBmYS0ke2ljb259XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZGF0YS1ob3Zlcj1cInRvb2x0aXBcIiBkYXRhLXRvb2x0aXAtZGVsYXk9XCIzNTBcIiBkYXRhLXRvb2x0aXAtY29udGVudD1cIiR7bmFtZX1cIj48L2k+YFxufVxuXG4vKipcbiAqIEFkZCBidXR0b25zIGluIHRoZSByaWdodCBvZiBzZWFyY2ggYmFyLlxuICpcbiAqIEByZXR1cm5zIHZvaWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXG4gIG5vZGUuY2xhc3NOYW1lID0gJ2N1c3RvbS1idXR0b24nXG4gIG5vZGUuaW5uZXJIVE1MID0gYFxuJHtpY29uTm9kZSgnZmlyZScsICfnhrHploDnsonlsIgnKX1cbiR7aWNvbk5vZGUoJ2Jhci1jaGFydCcsICflgIvkurrntbHoqIgnKX1cbiR7aWNvbk5vZGUoJ2hpc3RvcnknLCAn5q235Y+y5Zue6aGnJyl9XG4ke2ljb25Ob2RlKCdjb2cnLCAn6Kit5a6aJyl9YFxuXG4gIHVwVG8oZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2LmN1c3RvbS1zZWFyY2gtYmFyJyksICdkaXYnKS5hcHBlbmQobm9kZSlcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb250ZW50LXNjcmlwdHMvaW5pdGlhbGl6YXRpb25zL2J1dHRvbi5qcyIsIi8qKlxuICogQWRkIG1vZGFsLlxuICpcbiAqIEByZXR1cm5zIHZvaWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXG4gIG5vZGUuY2xhc3NOYW1lID0gJ2N1c3RvbS1tb2RhbCdcbiAgbm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gIG5vZGUuaW5uZXJIVE1MID0gYFxuPGRpdiBjbGFzcz1cImJhY2tncm91bmRcIj48L2Rpdj5cblxuPGRpdiBjbGFzcz1cImJveFwiPlxuICA8ZGl2IGNsYXNzPVwiaGVhZGVyXCI+XG4gICAgPGRpdiBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAxcmVtO1wiPlxuICAgICAgPGIgaWQ9XCJjdXN0b20tbW9kYWwtdGl0bGVcIiBzdHlsZT1cImZvbnQtc2l6ZTogMTZweDtcIj48L2I+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNsb3NlLWJ1dHRvblwiPlxuICAgICAgPGkgY2xhc3M9XCJmYSBmYS1sZyBmYS10aW1lc1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIFxuICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPjwvZGl2PlxuPC9kaXY+YFxuXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kKG5vZGUpXG5cbiAgY29uc3QgY2xvc2VFdmVudCA9ICgpID0+IHtcbiAgICBub2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgfVxuXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jdXN0b20tbW9kYWwgLmJhY2tncm91bmQnKS5vbmNsaWNrID0gY2xvc2VFdmVudFxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY3VzdG9tLW1vZGFsIC5jbG9zZS1idXR0b24gaScpLm9uY2xpY2sgPSBjbG9zZUV2ZW50XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29udGVudC1zY3JpcHRzL2luaXRpYWxpemF0aW9ucy9tb2RhbC5qcyIsIi8qKlxuICogQWRkIGNsYXNzIHRvIGZhY2Vib29rIG5hdmJhci5cbiAqXG4gKiBAcGFyYW0gZG9tXG4gKlxuICogQHJldHVybnMgdm9pZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGRvbSA9PiB7XG4gIGRvbS5jbGFzc05hbWUgKz0gJyBjdXN0b20tbmF2YmFyJ1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRlbnQtc2NyaXB0cy9pbml0aWFsaXphdGlvbnMvbmF2YmFyLmpzIiwiLyoqXG4gKiBBZGQgc2VhcmNoIGJhciBpbiB0aGUgcmlnaHQgb2YgZmFjZWJvb2sgc2VhcmNoIGJhci5cbiAqXG4gKiBAcGFyYW0gZG9tXG4gKlxuICogQHJldHVybnMgdm9pZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGRvbSA9PiB7XG4gIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXG4gIG5vZGUuY2xhc3NOYW1lID0gJ2N1c3RvbS1zZWFyY2gtYmFyJ1xuICBub2RlLmlubmVySFRNTCA9IGBcbjxmb3JtPlxuICA8ZGl2PlxuICAgIDxpbnB1dCBpZD1cImN1c3RvbS1zZWFyY2gtaW5wdXRcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiU2VhcmNoIERCXCI+XG4gIDwvZGl2PlxuPC9mb3JtPmBcblxuICBkb20uYXBwZW5kKG5vZGUpXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29udGVudC1zY3JpcHRzL2luaXRpYWxpemF0aW9ucy9zZWFyY2gtYmFyLmpzIiwibW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jdXN0b20tYnV0dG9uIGknKS5mb3JFYWNoKG5vZGUgPT4ge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jdXN0b20tbW9kYWwnKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2N1c3RvbS1tb2RhbC10aXRsZScpLmlubmVyVGV4dCA9IGUudGFyZ2V0LmRhdGFzZXQudG9vbHRpcENvbnRlbnRcblxuICAgICAgY29uc3QgbWFwcGluZyA9IHtcbiAgICAgICAgJ2ZpcmUnOiAnaG90dGVzdCcsXG4gICAgICAgICdiYXItY2hhcnQnOiAnc3RhdGlzdGljcycsXG4gICAgICAgICdoaXN0b3J5JzogJ2hpc3RvcnknLFxuICAgICAgICAnY29nJzogJ3NldHRpbmcnXG4gICAgICB9XG5cbiAgICAgIGxldCBuYW1lID0gZS50YXJnZXQuY2xhc3NOYW1lXG5cbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cihuYW1lLmxhc3RJbmRleE9mKCdmYS0nKSArIDMpXG5cbiAgICAgIHJlcXVpcmUoJy4vbW9kYWxzLycgKyBtYXBwaW5nW25hbWVdKShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY3VzdG9tLW1vZGFsIC5ib3ggLmNvbnRlbnQnKSlcbiAgICB9KVxuICB9KVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRlbnQtc2NyaXB0cy9tb25pdG9ycy9idXR0b24tY2xpY2suanMiLCIvKipcbiAqIExpc3RlbiBmb3IgZmFjZWJvb2sgc2VhcmNoLlxuICpcbiAqIEByZXR1cm5zIHZvaWRcbiAqL1xuY29uc3Qgc2VhcmNoID0gKCkgPT4ge1xuICBjb25zdCBmYlNlYXJjaElucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W25hbWU9XCJxXCJdJylcblxuICBpZiAoMiA+IGZiU2VhcmNoSW5wdXRzLmxlbmd0aCAmJiAhIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNxJykpIHtcbiAgICB3aW5kb3cuc2V0VGltZW91dChzZWFyY2gsIDEwMDApXG4gIH0gZWxzZSB7XG4gICAgZmJTZWFyY2hJbnB1dHMuaXRlbShmYlNlYXJjaElucHV0cy5sZW5ndGggLSAxKS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY3VzdG9tLXNlYXJjaC1pbnB1dCcpLnZhbHVlID0gZS50YXJnZXQudmFsdWVcbiAgICB9KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2VhcmNoXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29udGVudC1zY3JpcHRzL21vbml0b3JzL2ZhY2Vib29rLXNlYXJjaC5qcyIsImltcG9ydCBwYXJzZSBmcm9tICd1cmwtcGFyc2UnXG5pbXBvcnQgdXBUbyBmcm9tICcuLi8uLi91dGlscy91cC10bydcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIGNvbnN0IHJldHJpZXZlRmJpZEZyb21VcmwgPSAodXJsKSA9PiB7XG4gICAgaWYgKHVybC5lbmRzV2l0aCgnOjMnKSB8fCB1cmwuaW5jbHVkZXMoJ3N0b3J5X2ZiaWQnKSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9IGVsc2UgaWYgKHVybC5pbmNsdWRlcygncGhvdG8ucGhwJykpIHtcbiAgICAgIHJldHVybiBwYXJzZSh1cmwsIHRydWUpLnF1ZXJ5LmZiaWRzc3MgfHwgbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IHF1ZXVlID0gdXJsLnNwbGl0KCcvJylcblxuICAgIGlmICh1cmwuaW5jbHVkZXMoJ3Bob3RvcycpIHx8IHVybC5lbmRzV2l0aCgnLycpKSB7XG4gICAgICBxdWV1ZS5wb3AoKVxuICAgIH1cblxuICAgIHJldHVybiBxdWV1ZS5wb3AoKVxuICB9XG4gIGNvbnN0IGlzRmVlZEluU2NyZWVuID0gKGZlZWQpID0+IHtcbiAgICBjb25zdCByZWN0ID0gZmVlZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGNvbnN0IHNjcmVlbiA9IHtcbiAgICAgIHRvcDogd2luZG93LnNjcm9sbFksXG4gICAgICBib3R0b206IHdpbmRvdy5zY3JvbGxZICsgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuICAgIH1cbiAgICBjb25zdCBlbCA9IHtcbiAgICAgIHRvcDogZmVlZC5vZmZzZXRUb3AgKyByZWN0LmhlaWdodCAvIDMsXG4gICAgICBib3R0b206IGZlZWQub2Zmc2V0VG9wICsgcmVjdC5oZWlnaHQgLyAzICogMlxuICAgIH1cblxuICAgIGlmIChlbC50b3AgPiBzY3JlZW4udG9wICYmIGVsLnRvcCA8IHNjcmVlbi5ib3R0b20pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChlbC5ib3R0b20gPiBzY3JlZW4udG9wICYmIGVsLmJvdHRvbSA8IHNjcmVlbi5ib3R0b20pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBsZXQgbGFzdFkgPSAwXG4gIGNvbnN0IGZlZWRzID0gW11cblxuICB3aW5kb3cub25zY3JvbGwgPSAoKSA9PiB7XG4gICAgaWYgKCcvJyAhPT0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsYXN0WSA9IDBcblxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZGl2W2lkXj1cImh5cGVyZmVlZF9zdG9yeV9pZFwiXScpLmZvckVhY2goZmVlZCA9PiB7XG4gICAgICBjb25zdCBpc1Nwb25zb3JlZCA9IGZlZWQucXVlcnlTZWxlY3RvcignYVtocmVmXj1cImh0dHBzOi8vbC5mYWNlYm9vay5jb20vbC5waHBcIl0nKVxuXG4gICAgICBpZiAoaXNTcG9uc29yZWQpIHtcbiAgICAgICAgc3dpdGNoIChpc1Nwb25zb3JlZC5pbm5lclRleHQpIHtcbiAgICAgICAgICBjYXNlICdTcG9uc29yZWQnOlxuICAgICAgICAgIGNhc2UgJ+i0iuWKqSc6XG4gICAgICAgICAgY2FzZSAn5bqD5ZGKJzpcbiAgICAgICAgICAgIHJldHVybiBmZWVkLnJlbW92ZSgpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgZmVlZFRpbWUgPSBmZWVkLnF1ZXJ5U2VsZWN0b3IoJ2FiYnIudGltZXN0YW1wLmxpdmV0aW1lc3RhbXAnKVxuXG4gICAgICBpZiAoISBmZWVkVGltZSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgbGV0IGlzUHVibGljID0gdXBUbyhmZWVkVGltZSwgJ2RpdicpLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXRvb2x0aXAtY29udGVudF0nKVxuXG4gICAgICBpZiAoISBpc1B1YmxpYykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaXNQdWJsaWMgPSBpc1B1YmxpYy5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb250ZW50JylcblxuICAgICAgaWYgKGlzUHVibGljLmluY2x1ZGVzKCdQdWJsaWMnKSB8fCBpc1B1YmxpYy5pbmNsdWRlcygn5YWs6ZaLJykpIHtcbiAgICAgICAgY29uc3QgZmJpZCA9IHJldHJpZXZlRmJpZEZyb21VcmwodXBUbyhmZWVkVGltZSwgJ2EnKS5ocmVmKVxuXG4gICAgICAgIGlmIChmYmlkICYmICEgZmVlZHMuaW5jbHVkZXMoZmJpZCkpIHtcbiAgICAgICAgICBmZWVkcy5wdXNoKGZiaWQpXG5cbiAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBmZWVkcyB9KVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRmVlZEluU2NyZWVuKGZlZWQpKSB7XG4gICAgICAgICAgaWYgKDAgPiB3aW5kb3cuc2Nyb2xsWSAtIGxhc3RZKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnYmFjaycsIGZiaWQpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGZiaWQpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICAgIGxhc3RZID0gd2luZG93LnNjcm9sbFlcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRlbnQtc2NyaXB0cy9tb25pdG9ycy91c2VyLWZlZWQuanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciBib29sZWFuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIC9eKHRydWV8dHx5ZXN8eXwxKSQvaS50ZXN0KHZhbHVlLnRyaW0oKSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYm9vbGVhbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9ib29sZWFuL2xpYi9ib29sZWFuLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFNpbXBsZSBxdWVyeSBzdHJpbmcgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxdWVyeSBUaGUgcXVlcnkgc3RyaW5nIHRoYXQgbmVlZHMgdG8gYmUgcGFyc2VkLlxuICogQHJldHVybnMge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5KSB7XG4gIHZhciBwYXJzZXIgPSAvKFtePT8mXSspPT8oW14mXSopL2dcbiAgICAsIHJlc3VsdCA9IHt9XG4gICAgLCBwYXJ0O1xuXG4gIC8vXG4gIC8vIExpdHRsZSBuaWZ0eSBwYXJzaW5nIGhhY2ssIGxldmVyYWdlIHRoZSBmYWN0IHRoYXQgUmVnRXhwLmV4ZWMgaW5jcmVtZW50c1xuICAvLyB0aGUgbGFzdEluZGV4IHByb3BlcnR5IHNvIHdlIGNhbiBjb250aW51ZSBleGVjdXRpbmcgdGhpcyBsb29wIHVudGlsIHdlJ3ZlXG4gIC8vIHBhcnNlZCBhbGwgcmVzdWx0cy5cbiAgLy9cbiAgZm9yICg7XG4gICAgcGFydCA9IHBhcnNlci5leGVjKHF1ZXJ5KTtcbiAgICByZXN1bHRbZGVjb2RlVVJJQ29tcG9uZW50KHBhcnRbMV0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJ0WzJdKVxuICApO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGEgcXVlcnkgc3RyaW5nIHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIE9iamVjdCB0aGF0IHNob3VsZCBiZSB0cmFuc2Zvcm1lZC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwcmVmaXggT3B0aW9uYWwgcHJlZml4LlxuICogQHJldHVybnMge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5naWZ5KG9iaiwgcHJlZml4KSB7XG4gIHByZWZpeCA9IHByZWZpeCB8fCAnJztcblxuICB2YXIgcGFpcnMgPSBbXTtcblxuICAvL1xuICAvLyBPcHRpb25hbGx5IHByZWZpeCB3aXRoIGEgJz8nIGlmIG5lZWRlZFxuICAvL1xuICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBwcmVmaXgpIHByZWZpeCA9ICc/JztcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGhhcy5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgcGFpcnMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArJz0nKyBlbmNvZGVVUklDb21wb25lbnQob2JqW2tleV0pKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFpcnMubGVuZ3RoID8gcHJlZml4ICsgcGFpcnMuam9pbignJicpIDogJyc7XG59XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5leHBvcnRzLnN0cmluZ2lmeSA9IHF1ZXJ5c3RyaW5naWZ5O1xuZXhwb3J0cy5wYXJzZSA9IHF1ZXJ5c3RyaW5nO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3F1ZXJ5c3RyaW5naWZ5L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UncmUgcmVxdWlyZWQgdG8gYWRkIGEgcG9ydCBudW1iZXIuXG4gKlxuICogQHNlZSBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RlZmF1bHQtcG9ydFxuICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSBwb3J0IFBvcnQgbnVtYmVyIHdlIG5lZWQgdG8gY2hlY2tcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm90b2NvbCBQcm90b2NvbCB3ZSBuZWVkIHRvIGNoZWNrIGFnYWluc3QuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSXMgaXQgYSBkZWZhdWx0IHBvcnQgZm9yIHRoZSBnaXZlbiBwcm90b2NvbFxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVxdWlyZWQocG9ydCwgcHJvdG9jb2wpIHtcbiAgcHJvdG9jb2wgPSBwcm90b2NvbC5zcGxpdCgnOicpWzBdO1xuICBwb3J0ID0gK3BvcnQ7XG5cbiAgaWYgKCFwb3J0KSByZXR1cm4gZmFsc2U7XG5cbiAgc3dpdGNoIChwcm90b2NvbCkge1xuICAgIGNhc2UgJ2h0dHAnOlxuICAgIGNhc2UgJ3dzJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gODA7XG5cbiAgICBjYXNlICdodHRwcyc6XG4gICAgY2FzZSAnd3NzJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gNDQzO1xuXG4gICAgY2FzZSAnZnRwJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gMjE7XG5cbiAgICBjYXNlICdnb3BoZXInOlxuICAgIHJldHVybiBwb3J0ICE9PSA3MDtcblxuICAgIGNhc2UgJ2ZpbGUnOlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBwb3J0ICE9PSAwO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZXF1aXJlcy1wb3J0L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBzbGFzaGVzID0gL15bQS1aYS16XVtBLVphLXowLTkrLS5dKjpcXC9cXC8vO1xuXG4vKipcbiAqIFRoZXNlIHByb3BlcnRpZXMgc2hvdWxkIG5vdCBiZSBjb3BpZWQgb3IgaW5oZXJpdGVkIGZyb20uIFRoaXMgaXMgb25seSBuZWVkZWRcbiAqIGZvciBhbGwgbm9uIGJsb2IgVVJMJ3MgYXMgYSBibG9iIFVSTCBkb2VzIG5vdCBpbmNsdWRlIGEgaGFzaCwgb25seSB0aGVcbiAqIG9yaWdpbi5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIGlnbm9yZSA9IHsgaGFzaDogMSwgcXVlcnk6IDEgfVxuICAsIFVSTDtcblxuLyoqXG4gKiBUaGUgbG9jYXRpb24gb2JqZWN0IGRpZmZlcnMgd2hlbiB5b3VyIGNvZGUgaXMgbG9hZGVkIHRocm91Z2ggYSBub3JtYWwgcGFnZSxcbiAqIFdvcmtlciBvciB0aHJvdWdoIGEgd29ya2VyIHVzaW5nIGEgYmxvYi4gQW5kIHdpdGggdGhlIGJsb2JibGUgYmVnaW5zIHRoZVxuICogdHJvdWJsZSBhcyB0aGUgbG9jYXRpb24gb2JqZWN0IHdpbGwgY29udGFpbiB0aGUgVVJMIG9mIHRoZSBibG9iLCBub3QgdGhlXG4gKiBsb2NhdGlvbiBvZiB0aGUgcGFnZSB3aGVyZSBvdXIgY29kZSBpcyBsb2FkZWQgaW4uIFRoZSBhY3R1YWwgb3JpZ2luIGlzXG4gKiBlbmNvZGVkIGluIHRoZSBgcGF0aG5hbWVgIHNvIHdlIGNhbiB0aGFua2Z1bGx5IGdlbmVyYXRlIGEgZ29vZCBcImRlZmF1bHRcIlxuICogbG9jYXRpb24gZnJvbSBpdCBzbyB3ZSBjYW4gZ2VuZXJhdGUgcHJvcGVyIHJlbGF0aXZlIFVSTCdzIGFnYWluLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gbG9jIE9wdGlvbmFsIGRlZmF1bHQgbG9jYXRpb24gb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gbG9sY2F0aW9uIG9iamVjdC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbG9sY2F0aW9uKGxvYykge1xuICBsb2MgPSBsb2MgfHwgZ2xvYmFsLmxvY2F0aW9uIHx8IHt9O1xuICBVUkwgPSBVUkwgfHwgcmVxdWlyZSgnLi8nKTtcblxuICB2YXIgZmluYWxkZXN0aW5hdGlvbiA9IHt9XG4gICAgLCB0eXBlID0gdHlwZW9mIGxvY1xuICAgICwga2V5O1xuXG4gIGlmICgnYmxvYjonID09PSBsb2MucHJvdG9jb2wpIHtcbiAgICBmaW5hbGRlc3RpbmF0aW9uID0gbmV3IFVSTCh1bmVzY2FwZShsb2MucGF0aG5hbWUpLCB7fSk7XG4gIH0gZWxzZSBpZiAoJ3N0cmluZycgPT09IHR5cGUpIHtcbiAgICBmaW5hbGRlc3RpbmF0aW9uID0gbmV3IFVSTChsb2MsIHt9KTtcbiAgICBmb3IgKGtleSBpbiBpZ25vcmUpIGRlbGV0ZSBmaW5hbGRlc3RpbmF0aW9uW2tleV07XG4gIH0gZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGUpIHtcbiAgICBmb3IgKGtleSBpbiBsb2MpIHtcbiAgICAgIGlmIChrZXkgaW4gaWdub3JlKSBjb250aW51ZTtcbiAgICAgIGZpbmFsZGVzdGluYXRpb25ba2V5XSA9IGxvY1trZXldO1xuICAgIH1cblxuICAgIGlmIChmaW5hbGRlc3RpbmF0aW9uLnNsYXNoZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZmluYWxkZXN0aW5hdGlvbi5zbGFzaGVzID0gc2xhc2hlcy50ZXN0KGxvYy5ocmVmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmluYWxkZXN0aW5hdGlvbjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdXJsLXBhcnNlL2xvbGNhdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgbWFwID0ge1xuXHRcIi4vaGlzdG9yeVwiOiAxLFxuXHRcIi4vaGlzdG9yeS5qc1wiOiAxLFxuXHRcIi4vaG90dGVzdFwiOiAyLFxuXHRcIi4vaG90dGVzdC5qc1wiOiAyLFxuXHRcIi4vc2V0dGluZ1wiOiAzLFxuXHRcIi4vc2V0dGluZy5qc1wiOiAzLFxuXHRcIi4vc3RhdGlzdGljc1wiOiA0LFxuXHRcIi4vc3RhdGlzdGljcy5qc1wiOiA0XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpKTtcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdHZhciBpZCA9IG1hcFtyZXFdO1xuXHRpZighKGlkICsgMSkpIC8vIGNoZWNrIGZvciBudW1iZXJcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcblx0cmV0dXJuIGlkO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAxODtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbnRlbnQtc2NyaXB0cy9tb25pdG9ycy9tb2RhbHMgXlxcLlxcLy4qJFxuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHVwVG8gZnJvbSAnLi4vdXRpbHMvdXAtdG8nXG5cbmRvY3VtZW50Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgaWYgKCdpbnRlcmFjdGl2ZScgPT09IGRvY3VtZW50LnJlYWR5U3RhdGUpIHtcbiAgICBjb25zdCBkb20gPSAoKCkgPT4ge1xuICAgICAgbGV0IGRvbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Rpdltyb2xlPVwic2VhcmNoXCJdJylcblxuICAgICAgaWYgKCEgZG9tKSB7XG4gICAgICAgIGRvbSA9IHVwVG8oZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9ybVtyb2xlPVwic2VhcmNoXCJdJyksICdkaXYnKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXBUbyhkb20sICdkaXYnKVxuICAgIH0pKClcblxuICAgIHJlcXVpcmUoJy4vaW5pdGlhbGl6YXRpb25zL25hdmJhcicpKGRvbSlcbiAgICByZXF1aXJlKCcuL2luaXRpYWxpemF0aW9ucy9zZWFyY2gtYmFyJykoZG9tKVxuICAgIHJlcXVpcmUoJy4vaW5pdGlhbGl6YXRpb25zL2J1dHRvbicpKClcbiAgICByZXF1aXJlKCcuL2luaXRpYWxpemF0aW9ucy9tb2RhbCcpKClcblxuICAgIHJlcXVpcmUoJy4vbW9uaXRvcnMvZmFjZWJvb2stc2VhcmNoJykoKVxuICAgIHJlcXVpcmUoJy4vbW9uaXRvcnMvYnV0dG9uLWNsaWNrJykoKVxuICAgIHJlcXVpcmUoJy4vbW9uaXRvcnMvdXNlci1mZWVkJykoKVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29udGVudC1zY3JpcHRzL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==