!function(t){function e(n){if(o[n])return o[n].exports;var r=o[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var o={};return e.m=t,e.c=o,e.i=function(t){return t},e.d=function(t,o,n){e.o(t,o)||Object.defineProperty(t,o,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var o=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(o,"a",o),o},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=11)}([function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){for(e=e.toLowerCase();t&&t.parentNode;)if(t=t.parentNode,t.tagName&&t.tagName.toLowerCase()===e)return t;return null}},function(t,e,o){"use strict";function n(t){var e=p.exec(t);return{protocol:e[1]?e[1].toLowerCase():"",slashes:!!e[2],rest:e[3]}}function r(t,e){for(var o=(e||"/").split("/").slice(0,-1).concat(t.split("/")),n=o.length,r=o[n-1],s=!1,a=0;n--;)"."===o[n]?o.splice(n,1):".."===o[n]?(o.splice(n,1),a++):a&&(0===n&&(s=!0),o.splice(n,1),a--);return s&&o.unshift(""),"."!==r&&".."!==r||o.push(""),o.join("/")}function s(t,e,o){if(!(this instanceof s))return new s(t,e,o);var a,c,p,f,h,m,v=d.slice(),y=typeof e,b=this,g=0;for("object"!==y&&"string"!==y&&(o=e,e=null),o&&"function"!=typeof o&&(o=l.parse),e=u(e),c=n(t||""),a=!c.protocol&&!c.slashes,b.slashes=c.slashes||a&&e.slashes,b.protocol=c.protocol||e.protocol||"",t=c.rest,c.slashes||(v[2]=[/(.*)/,"pathname"]);g<v.length;g++)f=v[g],p=f[0],m=f[1],p!==p?b[m]=t:"string"==typeof p?~(h=t.indexOf(p))&&("number"==typeof f[2]?(b[m]=t.slice(0,h),t=t.slice(h+f[2])):(b[m]=t.slice(h),t=t.slice(0,h))):(h=p.exec(t))&&(b[m]=h[1],t=t.slice(0,h.index)),b[m]=b[m]||(a&&f[3]?e[m]||"":""),f[4]&&(b[m]=b[m].toLowerCase());o&&(b.query=o(b.query)),a&&e.slashes&&"/"!==b.pathname.charAt(0)&&(""!==b.pathname||""!==e.pathname)&&(b.pathname=r(b.pathname,e.pathname)),i(b.port,b.protocol)||(b.host=b.hostname,b.port=""),b.username=b.password="",b.auth&&(f=b.auth.split(":"),b.username=f[0]||"",b.password=f[1]||""),b.origin=b.protocol&&b.host&&"file:"!==b.protocol?b.protocol+"//"+b.host:"null",b.href=b.toString()}function a(t,e,o){var n=this;switch(t){case"query":"string"==typeof e&&e.length&&(e=(o||l.parse)(e)),n[t]=e;break;case"port":n[t]=e,i(e,n.protocol)?e&&(n.host=n.hostname+":"+e):(n.host=n.hostname,n[t]="");break;case"hostname":n[t]=e,n.port&&(e+=":"+n.port),n.host=e;break;case"host":n[t]=e,/:\d+$/.test(e)?(e=e.split(":"),n.port=e.pop(),n.hostname=e.join(":")):(n.hostname=e,n.port="");break;case"protocol":n.protocol=e.toLowerCase(),n.slashes=!o;break;case"pathname":n.pathname=e.length&&"/"!==e.charAt(0)?"/"+e:e;break;default:n[t]=e}for(var r=0;r<d.length;r++){var s=d[r];s[4]&&(n[s[1]]=n[s[1]].toLowerCase())}return n.origin=n.protocol&&n.host&&"file:"!==n.protocol?n.protocol+"//"+n.host:"null",n.href=n.toString(),n}function c(t){t&&"function"==typeof t||(t=l.stringify);var e,o=this,n=o.protocol;n&&":"!==n.charAt(n.length-1)&&(n+=":");var r=n+(o.slashes?"//":"");return o.username&&(r+=o.username,o.password&&(r+=":"+o.password),r+="@"),r+=o.host+o.pathname,e="object"==typeof o.query?t(o.query):o.query,e&&(r+="?"!==e.charAt(0)?"?"+e:e),o.hash&&(r+=o.hash),r}var i=o(8),u=o(9),l=o(7),p=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,d=[["#","hash"],["?","query"],["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d+)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]];s.prototype={set:a,toString:c},s.extractProtocol=n,s.location=u,s.qs=l,t.exports=s},,function(t,e,o){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function r(t,e){return'<i class="fa fa-fw fa-'+t+'" aria-hidden="true" data-hover="tooltip" data-tooltip-delay="350" data-tooltip-content="'+e+'"></i>'}var s=o(0),a=n(s);t.exports=function(){var t=document.createElement("div");t.className="custom-button",t.innerHTML="\n"+r("fire","熱門粉專")+"\n"+r("bar-chart","個人統計")+"\n"+r("history","歷史回顧")+"\n"+r("cog","設定"),(0,a.default)(document.querySelector("div.custom-search-bar"),"div").append(t),document.querySelectorAll(".custom-button i").forEach(function(t){t.addEventListener("click",function(t){document.querySelector(".custom-modal").style.display="block",document.querySelector("#custom-modal-title").innerText=t.target.dataset.tooltipContent})})}},function(t,e,o){"use strict";t.exports=function(){var t=document.createElement("div");t.className="custom-modal",t.style.display="none",t.innerHTML='\n<div class="background"></div>\n<div class="box">\n  <div class="header">\n    <div style="margin-left: 1rem;">\n      <b id="custom-modal-title"></b>\n    </div>\n    <div class="close-button">\n      <i class="fa fa-lg fa-times" aria-hidden="true"></i>\n    </div>\n  </div>\n  <div class="content"></div>\n</div>',document.body.append(t);var e=function(){t.style.display="none"};document.querySelector(".custom-modal .background").onclick=e,document.querySelector(".custom-modal .close-button i").onclick=e}},function(t,e,o){"use strict";t.exports=function(t){t.className+=" custom-navbar"}},function(t,e,o){"use strict";t.exports=function(t){var e=document.createElement("div");e.className="custom-search-bar",e.innerHTML='\n<form>\n  <div>\n    <input id="custom-search-input" type="text" placeholder="Search DB">\n  </div>\n</form>',t.append(e)}},function(t,e,o){"use strict";function n(t){for(var e,o=/([^=?&]+)=?([^&]*)/g,n={};e=o.exec(t);n[decodeURIComponent(e[1])]=decodeURIComponent(e[2]));return n}function r(t,e){e=e||"";var o=[];"string"!=typeof e&&(e="?");for(var n in t)s.call(t,n)&&o.push(encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return o.length?e+o.join("&"):""}var s=Object.prototype.hasOwnProperty;e.stringify=r,e.parse=n},function(t,e,o){"use strict";t.exports=function(t,e){if(e=e.split(":")[0],t=+t,!t)return!1;switch(e){case"http":case"ws":return 80!==t;case"https":case"wss":return 443!==t;case"ftp":return 21!==t;case"gopher":return 70!==t;case"file":return!1}return 0!==t}},function(t,e,o){"use strict";(function(e){var n,r=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,s={hash:1,query:1};t.exports=function(t){t=t||e.location||{},n=n||o(1);var a,c={},i=typeof t;if("blob:"===t.protocol)c=new n(unescape(t.pathname),{});else if("string"===i){c=new n(t,{});for(a in s)delete c[a]}else if("object"===i){for(a in t)a in s||(c[a]=t[a]);void 0===c.slashes&&(c.slashes=r.test(t.href))}return c}}).call(e,o(10))},function(t,e){var o;o=function(){return this}();try{o=o||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(o=window)}t.exports=o},function(t,e,o){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}var r=o(0),s=n(r);document.onreadystatechange=function(){if("interactive"===document.readyState){var t=function(){var t=document.querySelector('div[role="search"]');return t||(t=(0,s.default)(document.querySelector('form[role="search"]'),"div")),(0,s.default)(t,"div")}();o(5)(t),o(6)(t),o(3)(),o(4)(),o(13)(),o(14)()}}},,function(t,e,o){"use strict";var n=function t(){var e=document.querySelectorAll('input[name="q"]');2>e.length&&!document.querySelector("#q")?window.setTimeout(t,1e3):e.item(e.length-1).addEventListener("input",function(t){document.querySelector("#custom-search-input").value=t.target.value})};t.exports=n},function(t,e,o){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}var r=o(1),s=n(r),a=o(0),c=n(a);t.exports=function(){var t=function(t){if(t.endsWith(":3")||t.includes("story_fbid"))return null;if(t.includes("photo.php"))return(0,s.default)(t,!0).query.fbidsss||null;var e=t.split("/");return(t.includes("photos")||t.endsWith("/"))&&e.pop(),e.pop()},e=function(t){var e=t.getBoundingClientRect(),o={top:window.scrollY,bottom:window.scrollY+document.documentElement.clientHeight},n={top:t.offsetTop+e.height/3,bottom:t.offsetTop+e.height/3*2};return n.top>o.top&&n.top<o.bottom||n.bottom>o.top&&n.bottom<o.bottom},o=0,n=[];window.onscroll=function(){if("/"!==window.location.pathname)return void(o=0);document.querySelectorAll('div[id^="hyperfeed_story_id"]').forEach(function(r){var s=r.querySelector('a[href^="https://l.facebook.com/l.php"]');if(s)switch(s.innerText){case"Sponsored":case"贊助":case"広告":return r.remove()}var a=r.querySelector("abbr.timestamp.livetimestamp");if(a){var i=(0,c.default)(a,"div").querySelector("[data-tooltip-content]");if(i&&(i=i.getAttribute("data-tooltip-content"),i.includes("Public")||i.includes("公開"))){var u=t((0,c.default)(a,"a").href);u&&!n.includes(u)&&(n.push(u),chrome.storage.local.set({feeds:n})),e(r)&&(0>window.scrollY-o?console.log("back",u):console.log(u))}}}),o=window.scrollY}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,